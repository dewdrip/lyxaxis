{
  "language": "Solidity",
  "sources": {
    "@erc725/smart-contracts/contracts/constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// ERC165 INTERFACE IDs\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\n\n// ERC725X OPERATION TYPES\nuint256 constant OPERATION_0_CALL = 0;\nuint256 constant OPERATION_1_CREATE = 1;\nuint256 constant OPERATION_2_CREATE2 = 2;\nuint256 constant OPERATION_3_STATICCALL = 3;\nuint256 constant OPERATION_4_DELEGATECALL = 4;\n"
    },
    "@erc725/smart-contracts/contracts/custom/OwnableUnset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// errors\nimport {\n    OwnableCannotSetZeroAddressAsOwner,\n    OwnableCallerNotTheOwner\n} from \"../errors.sol\";\n\n/**\n * @title OwnableUnset\n * @dev modified version of OpenZeppelin implementation, where:\n * - _setOwner(address) function is internal, so this function can be used in constructor\n * of contracts implementation (instead of using transferOwnership(address)\n * - the contract does not inherit from Context contract\n */\nabstract contract OwnableUnset {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableCannotSetZeroAddressAsOwner();\n        }\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != msg.sender) {\n            revert OwnableCallerNotTheOwner(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Changes the owner if `newOwner` and oldOwner are different\n     * This pattern is useful in inheritance.\n     */\n    function _setOwner(address newOwner) internal virtual {\n        if (newOwner != owner()) {\n            emit OwnershipTransferred(_owner, newOwner);\n            _owner = newOwner;\n        }\n    }\n}\n"
    },
    "@erc725/smart-contracts/contracts/ERC725XCore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.5;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC725X} from \"./interfaces/IERC725X.sol\";\n\n// libraries\nimport {Create2} from \"@openzeppelin/contracts/utils/Create2.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {BytesLib} from \"solidity-bytes-utils/contracts/BytesLib.sol\";\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\n\n// constants\nimport {\n    _INTERFACEID_ERC725X,\n    OPERATION_0_CALL,\n    OPERATION_1_CREATE,\n    OPERATION_2_CREATE2,\n    OPERATION_3_STATICCALL,\n    OPERATION_4_DELEGATECALL\n} from \"./constants.sol\";\n\nimport {\n    ERC725X_InsufficientBalance,\n    ERC725X_UnknownOperationType,\n    ERC725X_MsgValueDisallowedInStaticCall,\n    ERC725X_MsgValueDisallowedInDelegateCall,\n    ERC725X_CreateOperationsRequireEmptyRecipientAddress,\n    ERC725X_ContractDeploymentFailed,\n    ERC725X_NoContractBytecodeProvided,\n    ERC725X_ExecuteParametersLengthMismatch,\n    ERC725X_ExecuteParametersEmptyArray\n} from \"./errors.sol\";\n\n/**\n * @title Core implementation of ERC725X sub-standard, a generic executor.\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * It allows to use different type of message calls to interact with addresses such as `call`, `staticcall` and `delegatecall`.\n * It also allows to deploy and create new contracts via both the `create` and `create2` opcodes.\n * This is the basis for a smart contract based account system, but could also be used as a proxy account system.\n */\nabstract contract ERC725XCore is OwnableUnset, ERC165, IERC725X {\n    /**\n     * @inheritdoc IERC725X\n     * @custom:requirements\n     * - SHOULD only be callable by the {owner} of the contract.\n     * - if a `value` is provided, the contract MUST have at least this amount to transfer to `target` from its balance and execute successfully.\n     * - if the operation type is `STATICCALL` (`3`) or `DELEGATECALL` (`4`), `value` transfer is disallowed and SHOULD be 0.\n     * - `target` SHOULD be `address(0)` when deploying a new contract via `operationType` `CREATE` (`1`), or `CREATE2` (`2`).\n     *\n     * @custom:events\n     * - {Executed} event when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL).\n     * - {ContractCreated} event when deploying a new contract with `operationType` 1 (CREATE) or 2 (CREATE2).\n     */\n    function execute(\n        uint256 operationType,\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public payable virtual override onlyOwner returns (bytes memory) {\n        return _execute(operationType, target, value, data);\n    }\n\n    /**\n     * @inheritdoc IERC725X\n     * @custom:requirements\n     * - All the array parameters provided MUST be equal and have the same length.\n     * - SHOULD only be callable by the {owner} of the contract.\n     * - The contract MUST have in its balance **at least the sum of all the `values`** to transfer and execute successfully each calldata payloads.\n     *\n     * @custom:warning\n     * - The `msg.value` should not be trusted for any method called with `operationType`: `DELEGATECALL` (4).\n     *\n     * @custom:events\n     * - {Executed} event, when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL)\n     * - {ContractCreated} event, when deploying a contract with `operationType` 1 (CREATE) or 2 (CREATE2)\n     */\n    function executeBatch(\n        uint256[] memory operationsType,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) public payable virtual override onlyOwner returns (bytes[] memory) {\n        return _executeBatch(operationsType, targets, values, datas);\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\n        return\n            interfaceId == _INTERFACEID_ERC725X ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev check the `operationType` provided and perform the associated low-level opcode after checking for requirements (see {execute}).\n     */\n    function _execute(\n        uint256 operationType,\n        address target,\n        uint256 value,\n        bytes memory data\n    ) internal virtual returns (bytes memory) {\n        // CALL\n        if (operationType == OPERATION_0_CALL) {\n            return _executeCall(target, value, data);\n        }\n\n        // Deploy with CREATE\n        if (operationType == OPERATION_1_CREATE) {\n            if (target != address(0)) {\n                revert ERC725X_CreateOperationsRequireEmptyRecipientAddress();\n            }\n            return _deployCreate(value, data);\n        }\n\n        // Deploy with CREATE2\n        if (operationType == OPERATION_2_CREATE2) {\n            if (target != address(0)) {\n                revert ERC725X_CreateOperationsRequireEmptyRecipientAddress();\n            }\n            return _deployCreate2(value, data);\n        }\n\n        // STATICCALL\n        if (operationType == OPERATION_3_STATICCALL) {\n            if (value != 0) {\n                revert ERC725X_MsgValueDisallowedInStaticCall();\n            }\n            return _executeStaticCall(target, data);\n        }\n\n        // DELEGATECALL\n        //\n        // WARNING! delegatecall is a dangerous operation type! use with EXTRA CAUTION\n        //\n        // delegate allows to call another deployed contract and use its functions\n        // to update the state of the current calling contract.\n        //\n        // this can lead to unexpected behaviour on the contract storage, such as:\n        // - updating any state variables (even if these are protected)\n        // - update the contract owner\n        // - run selfdestruct in the context of this contract\n        //\n        if (operationType == OPERATION_4_DELEGATECALL) {\n            if (value != 0) {\n                revert ERC725X_MsgValueDisallowedInDelegateCall();\n            }\n            return _executeDelegateCall(target, data);\n        }\n\n        revert ERC725X_UnknownOperationType(operationType);\n    }\n\n    /**\n     * @dev check each `operationType` provided in the batch and perform the associated low-level opcode after checking for requirements (see {executeBatch}).\n     */\n    function _executeBatch(\n        uint256[] memory operationsType,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) internal virtual returns (bytes[] memory) {\n        if (\n            operationsType.length != targets.length ||\n            (targets.length != values.length || values.length != datas.length)\n        ) {\n            revert ERC725X_ExecuteParametersLengthMismatch();\n        }\n\n        if (operationsType.length == 0) {\n            revert ERC725X_ExecuteParametersEmptyArray();\n        }\n\n        bytes[] memory result = new bytes[](operationsType.length);\n\n        for (uint256 i = 0; i < operationsType.length; ) {\n            result[i] = _execute(\n                operationsType[i],\n                targets[i],\n                values[i],\n                datas[i]\n            );\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Perform low-level call (operation type = 0)\n     * @param target The address on which call is executed\n     * @param value The value to be sent with the call\n     * @param data The data to be sent with the call\n     * @return result The data from the call\n     */\n    function _executeCall(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) internal virtual returns (bytes memory result) {\n        if (address(this).balance < value) {\n            revert ERC725X_InsufficientBalance(address(this).balance, value);\n        }\n\n        emit Executed(OPERATION_0_CALL, target, value, bytes4(data));\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.call{value: value}(\n            data\n        );\n        return\n            Address.verifyCallResult(\n                success,\n                returnData,\n                \"ERC725X: Unknown Error\"\n            );\n    }\n\n    /**\n     * @dev Perform low-level staticcall (operation type = 3)\n     * @param target The address on which staticcall is executed\n     * @param data The data to be sent with the staticcall\n     * @return result The data returned from the staticcall\n     */\n    function _executeStaticCall(\n        address target,\n        bytes memory data\n    ) internal virtual returns (bytes memory result) {\n        emit Executed(OPERATION_3_STATICCALL, target, 0, bytes4(data));\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.staticcall(data);\n        return\n            Address.verifyCallResult(\n                success,\n                returnData,\n                \"ERC725X: Unknown Error\"\n            );\n    }\n\n    /**\n     * @dev Perform low-level delegatecall (operation type = 4)\n     * @param target The address on which delegatecall is executed\n     * @param data The data to be sent with the delegatecall\n     * @return result The data returned from the delegatecall\n     *\n     * @custom:warning The `msg.value` should not be trusted for any method called with `operationType`: `DELEGATECALL` (4).\n     */\n    function _executeDelegateCall(\n        address target,\n        bytes memory data\n    ) internal virtual returns (bytes memory result) {\n        emit Executed(OPERATION_4_DELEGATECALL, target, 0, bytes4(data));\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.delegatecall(data);\n        return\n            Address.verifyCallResult(\n                success,\n                returnData,\n                \"ERC725X: Unknown Error\"\n            );\n    }\n\n    /**\n     * @dev Deploy a contract using the `CREATE` opcode (operation type = 1)\n     * @param value The value to be sent to the contract created\n     * @param creationCode The contract creation bytecode to deploy appended with the constructor argument(s)\n     * @return newContract The address of the contract created as bytes\n     */\n    function _deployCreate(\n        uint256 value,\n        bytes memory creationCode\n    ) internal virtual returns (bytes memory newContract) {\n        if (address(this).balance < value) {\n            revert ERC725X_InsufficientBalance(address(this).balance, value);\n        }\n\n        if (creationCode.length == 0) {\n            revert ERC725X_NoContractBytecodeProvided();\n        }\n\n        address contractAddress;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            contractAddress := create(\n                value,\n                add(creationCode, 0x20),\n                mload(creationCode)\n            )\n        }\n\n        if (contractAddress == address(0)) {\n            revert ERC725X_ContractDeploymentFailed();\n        }\n\n        emit ContractCreated(\n            OPERATION_1_CREATE,\n            contractAddress,\n            value,\n            bytes32(0)\n        );\n        return abi.encodePacked(contractAddress);\n    }\n\n    /**\n     * @dev Deploy a contract using the `CREATE2` opcode (operation type = 2)\n     * @param value The value to be sent to the contract created\n     * @param creationCode The contract creation bytecode to deploy appended with the constructor argument(s) and a bytes32 salt\n     * @return newContract The address of the contract created as bytes\n     */\n    function _deployCreate2(\n        uint256 value,\n        bytes memory creationCode\n    ) internal virtual returns (bytes memory newContract) {\n        if (creationCode.length == 0) {\n            revert ERC725X_NoContractBytecodeProvided();\n        }\n\n        bytes32 salt = BytesLib.toBytes32(\n            creationCode,\n            creationCode.length - 32\n        );\n        bytes memory bytecode = BytesLib.slice(\n            creationCode,\n            0,\n            creationCode.length - 32\n        );\n        address contractAddress = Create2.deploy(value, salt, bytecode);\n\n        emit ContractCreated(OPERATION_2_CREATE2, contractAddress, value, salt);\n        return abi.encodePacked(contractAddress);\n    }\n}\n"
    },
    "@erc725/smart-contracts/contracts/ERC725YCore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC725Y} from \"./interfaces/IERC725Y.sol\";\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\n\n// constants\nimport {_INTERFACEID_ERC725Y} from \"./constants.sol\";\n\nimport {\n    ERC725Y_MsgValueDisallowed,\n    ERC725Y_DataKeysValuesLengthMismatch,\n    ERC725Y_DataKeysValuesEmptyArray\n} from \"./errors.sol\";\n\n/**\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\n    /**\n     * @dev Map `bytes32` data keys to their `bytes` data values.\n     */\n    mapping(bytes32 => bytes) internal _store;\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getData(\n        bytes32 dataKey\n    ) public view virtual override returns (bytes memory dataValue) {\n        dataValue = _getData(dataKey);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) public view virtual override returns (bytes[] memory dataValues) {\n        dataValues = new bytes[](dataKeys.length);\n\n        for (uint256 i = 0; i < dataKeys.length; ) {\n            dataValues[i] = _getData(dataKeys[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n\n        return dataValues;\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     * @custom:requirements\n     * - SHOULD only be callable by the {owner}.\n     *\n     * @custom:warning\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n     *\n     * @custom:events {DataChanged} event.\n     */\n    function setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) public payable virtual override onlyOwner {\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\n        _setData(dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     * @custom:requirements\n     * - SHOULD only be callable by the {owner} of the contract.\n     *\n     * @custom:warning\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n     *\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) public payable virtual override onlyOwner {\n        /// @dev do not allow to send value by default when setting data in ERC725Y\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\n\n        if (dataKeys.length != dataValues.length) {\n            revert ERC725Y_DataKeysValuesLengthMismatch();\n        }\n\n        if (dataKeys.length == 0) {\n            revert ERC725Y_DataKeysValuesEmptyArray();\n        }\n\n        for (uint256 i = 0; i < dataKeys.length; ) {\n            _setData(dataKeys[i], dataValues[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\n     *\n     * ```solidity\n     * mapping(bytes32 => bytes) _store\n     * ```\n     *\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\n     */\n    function _getData(\n        bytes32 dataKey\n    ) internal view virtual returns (bytes memory dataValue) {\n        return _store[dataKey];\n    }\n\n    /**\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\n     * `bytes32` data keys mapped to their `bytes` data values.\n     *\n     * ```solidity\n     * mapping(bytes32 => bytes) _store\n     * ```\n     *\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\n     *\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual {\n        _store[dataKey] = dataValue;\n        emit DataChanged(dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\n        return\n            interfaceId == _INTERFACEID_ERC725Y ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@erc725/smart-contracts/contracts/errors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\n * initializing it or transferring ownership of the contract.\n */\nerror OwnableCannotSetZeroAddressAsOwner();\n\n/**\n * @dev Reverts when only the owner is allowed to call the function.\n * @param callerAddress The address that tried to make the call.\n */\nerror OwnableCallerNotTheOwner(address callerAddress);\n\n/**\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\n * @param balance The balance of native tokens of the ERC725X smart contract.\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\n */\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\n\n/**\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\n */\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\n\n/**\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\n */\nerror ERC725X_MsgValueDisallowedInStaticCall();\n\n/**\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\n */\nerror ERC725X_MsgValueDisallowedInDelegateCall();\n\n/**\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\n\n/**\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_ContractDeploymentFailed();\n\n/**\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_NoContractBytecodeProvided();\n\n/**\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\n * array parameters provided when calling the {executeBatch} function.\n */\nerror ERC725X_ExecuteParametersLengthMismatch();\n\n/**\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\n */\nerror ERC725X_ExecuteParametersEmptyArray();\n\n/**\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\n * array parameters provided when calling the {setDataBatch} function.\n */\nerror ERC725Y_DataKeysValuesLengthMismatch();\n\n/**\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\n */\nerror ERC725Y_DataKeysValuesEmptyArray();\n\n/**\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\n */\nerror ERC725Y_MsgValueDisallowed();\n"
    },
    "@erc725/smart-contracts/contracts/interfaces/IERC725X.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for the ERC725X sub-standard, a generic executor.\n * @dev ERC725X provides the ability to call arbitrary functions on any other smart contract (including itself).\n * It allows to use different type of message calls to interact with addresses such as `call`, `staticcall` and `delegatecall`.\n * It also allows to deploy and create new contracts via both the `create` and `create2` opcodes.\n * This is the basis for a smart contract based account system, but could also be used as a proxy account system.\n */\ninterface IERC725X is IERC165 {\n    /**\n     * @notice Deployed new contract at address `contractAddress` and funded with `value` wei (deployed using opcode: `operationType`).\n     * @dev Emitted when a new contract was created and deployed.\n     * @param operationType The opcode used to deploy the contract (`CREATE` or `CREATE2`).\n     * @param contractAddress The created contract address.\n     * @param value The amount of native tokens (in Wei) sent to fund the created contract on deployment.\n     * @param salt The salt used to deterministically deploy the contract (`CREATE2` only). If `CREATE` opcode is used, the salt value will be `bytes32(0)`.\n     */\n    event ContractCreated(\n        uint256 indexed operationType,\n        address indexed contractAddress,\n        uint256 value,\n        bytes32 indexed salt\n    );\n\n    /**\n     * @notice Called address `target` using `operationType` with `value` wei and `data`.\n     * @dev Emitted when calling an address `target` (EOA or contract) with `value`.\n     * @param operationType The low-level call opcode used to call the `target` address (`CALL`, `STATICALL` or `DELEGATECALL`).\n     * @param target The address to call. `target` will be unused if a contract is created (operation types 1 and 2).\n     * @param value The amount of native tokens transferred along the call (in Wei).\n     * @param selector The first 4 bytes (= function selector) of the data sent with the call.\n     */\n    event Executed(\n        uint256 indexed operationType,\n        address indexed target,\n        uint256 value,\n        bytes4 indexed selector\n    );\n\n    /**\n     * @notice Calling address `target` using `operationType`, transferring `value` wei and data: `data`.\n     *\n     * @param operationType The operation type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4\n     * @param target The address of the EOA or smart contract.  (unused if a contract is created via operation type 1 or 2)\n     * @param value The amount of native tokens to transfer (in Wei)\n     * @param data The call data, or the creation bytecode of the contract to deploy if `operationType` is `1` or `2`.\n     *\n     * @dev Generic executor function to:\n     *\n     * - send native tokens to any address.\n     * - interact with any contract by passing an abi-encoded function call in the `data` parameter.\n     * - deploy a contract by providing its creation bytecode in the `data` parameter.\n     *\n     * @custom:warning Be aware that `msg.value` is persisting between the caller and the callee when using `DELEGATECALL` (`4`) as `operationType`.\n     */\n    function execute(\n        uint256 operationType,\n        address target,\n        uint256 value,\n        bytes memory data\n    ) external payable returns (bytes memory);\n\n    /**\n     * @notice Calling multiple addresses `targets` using `operationsType`, transferring `values` wei and data: `datas`.\n     *\n     * @dev Batch executor function that behaves the same as {execute} but allowing multiple operations in the same transaction.\n     *\n     * @param operationsType The list of operations type used: `CALL = 0`; `CREATE = 1`; `CREATE2 = 2`; `STATICCALL = 3`; `DELEGATECALL = 4`\n     * @param targets The list of addresses to call. `targets` will be unused if a contract is created (operation types 1 and 2).\n     * @param values The list of native token amounts to transfer (in Wei).\n     * @param datas The list of calldata, or the creation bytecode of the contract to deploy if `operationType` is `1` or `2`.\n     *\n     * @custom:warning The `msg.value` should not be trusted for any method called with the batch with `operationType`: `DELEGATECALL` (4).\n     */\n    function executeBatch(\n        uint256[] memory operationsType,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) external payable returns (bytes[] memory);\n}\n"
    },
    "@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\ninterface IERC725Y is IERC165 {\n    /**\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n     * @param dataKey The data key for which a bytes value is set.\n     * @param dataValue The value to set for the given data key.\n     */\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n     * @param dataKey The data key for which to retrieve the value.\n     * @return dataValue The bytes value stored under the specified data key.\n     */\n    function getData(\n        bytes32 dataKey\n    ) external view returns (bytes memory dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n     * @param dataKeys The array of keys which values to retrieve\n     * @return dataValues The array of data stored at multiple keys\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) external view returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n     *\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\n     * a fee mechanism for setting specific data.\n     *\n     * @param dataKey The data key for which to set a new value.\n     * @param dataValue The new bytes value to set.\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\n\n    /**\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n     *\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n     *\n     * @param dataKeys An array of data keys to set bytes values for.\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) external payable;\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0ERC725Account.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp0-contracts/contracts/LSP0ERC725Account.sol\";\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP20CallVerification/ILSP20CallVerifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp20-contracts/contracts/ILSP20CallVerifier.sol\";\n"
    },
    "@lukso/lsp0-contracts/contracts/ILSP0ERC725Account.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface of the [LSP-0-ERC725Account] standard, an account based smart contract that represents an identity on-chain.\n *\n * @author Fabian Vogelsteller <fabian@lukso.network>, Jean Cavallera (CJ42)\n */\ninterface ILSP0ERC725Account {\n    /**\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n     *\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n     * @param data An array of ABI encoded function calls to be called on the contract.\n     * @return results An array of abi-encoded data returned by the functions executed.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n}\n"
    },
    "@lukso/lsp0-contracts/contracts/LSP0Constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP0 = 0x24871b3d;\nbytes4 constant _INTERFACEID_ERC1271 = 0x1626ba7e;\n\n// ERC1271 - Standard Signature Validation\nbytes4 constant _ERC1271_SUCCESSVALUE = 0x1626ba7e;\nbytes4 constant _ERC1271_FAILVALUE = 0xffffffff;\n\n// --- Native Token Type Id\n\n// keccak256('LSP0ValueReceived')\nbytes32 constant _TYPEID_LSP0_VALUE_RECEIVED = 0x9c4705229491d365fb5434052e12a386d6771d976bea61070a8c694e8affea3d;\n\n// Ownership Transfer Type IDs\n\n// keccak256('LSP0OwnershipTransferStarted')\nbytes32 constant _TYPEID_LSP0_OwnershipTransferStarted = 0xe17117c9d2665d1dbeb479ed8058bbebde3c50ac50e2e65619f60006caac6926;\n\n// keccak256('LSP0OwnershipTransferred_SenderNotification')\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_SenderNotification = 0xa4e59c931d14f7c8a7a35027f92ee40b5f2886b9fdcdb78f30bc5ecce5a2f814;\n\n// keccak256('LSP0OwnershipTransferred_RecipientNotification')\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_RecipientNotification = 0xceca317f109c43507871523e82dc2a3cc64dfa18f12da0b6db14f6e23f995538;\n"
    },
    "@lukso/lsp0-contracts/contracts/LSP0ERC725Account.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {Version} from \"./Version.sol\";\nimport {LSP0ERC725AccountCore} from \"./LSP0ERC725AccountCore.sol\";\nimport {\n    OwnableUnset\n} from \"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\";\n\n// constants\nimport {_TYPEID_LSP0_VALUE_RECEIVED} from \"./LSP0Constants.sol\";\n\n/**\n * @title Deployable Implementation of [LSP-0-ERC725Account] Standard.\n *\n * @author Fabian Vogelsteller <fabian@lukso.network>, Jean Cavallera (CJ42)\n *\n * @dev A smart contract account including basic functionalities such as:\n * - Detecting supported standards using [ERC-165]\n * - Executing several operation on other addresses including creating contracts using [ERC-725X]\n * - A generic data key-value store using [ERC-725Y]\n * - Validating signatures using [ERC-1271]\n * - Receiving notification and react on them using [LSP-1-UniversalReceiver]\n * - Safer ownership management through 2-steps transfer using [LSP-14-Ownable2Step]\n * - Extending the account with new functions and interfaceIds of future standards using [LSP-17-ContractExtension]\n * - Verifying calls on the owner to make it easier to interact with the account directly using [LSP-20-CallVerification]\n */\ncontract LSP0ERC725Account is LSP0ERC725AccountCore, Version {\n    /**\n     * @notice Deploying a LSP0ERC725Account contract with owner set to address `initialOwner`.\n     *\n     * @dev Set `initialOwner` as the contract owner.\n     * - The `constructor` also allows funding the contract on deployment.\n     * - The `initialOwner` will then be allowed to call protected functions marked with the `onlyOwner` modifier.\n     *\n     * @param initialOwner The owner of the contract.\n     *\n     * @custom:events\n     * - {UniversalReceiver} event with typeId {`LSP0ValueReceived`} when when funding the contract on deployment.\n     * - {OwnershipTransferred} event when `initialOwner` is set as the contract {owner}.\n     */\n    constructor(address initialOwner) payable {\n        if (msg.value != 0) {\n            emit UniversalReceiver(\n                msg.sender,\n                msg.value,\n                _TYPEID_LSP0_VALUE_RECEIVED,\n                \"\",\n                \"\"\n            );\n        }\n\n        OwnableUnset._setOwner(initialOwner);\n    }\n}\n"
    },
    "@lukso/lsp0-contracts/contracts/LSP0ERC725AccountCore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport {ILSP0ERC725Account} from \"./ILSP0ERC725Account.sol\";\nimport {\n    ILSP1UniversalReceiver\n} from \"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\";\n\nimport {\n    ILSP1UniversalReceiverDelegate as ILSP1Delegate\n} from \"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiverDelegate.sol\";\n\n// libraries\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {LSP1Utils} from \"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\";\nimport {LSP2Utils} from \"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\";\n\n// modules\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\nimport {ERC725XCore} from \"@erc725/smart-contracts/contracts/ERC725XCore.sol\";\nimport {\n    OwnableUnset\n} from \"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\";\nimport {\n    LSP14Ownable2Step\n} from \"@lukso/lsp14-contracts/contracts/LSP14Ownable2Step.sol\";\nimport {\n    LSP17Extendable\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\";\nimport {\n    LSP20CallVerification\n} from \"@lukso/lsp20-contracts/contracts/LSP20CallVerification.sol\";\n\n// constants\nimport {\n    _INTERFACEID_LSP0,\n    _INTERFACEID_ERC1271,\n    _ERC1271_SUCCESSVALUE,\n    _ERC1271_FAILVALUE,\n    _TYPEID_LSP0_VALUE_RECEIVED,\n    _TYPEID_LSP0_OwnershipTransferStarted,\n    _TYPEID_LSP0_OwnershipTransferred_SenderNotification,\n    _TYPEID_LSP0_OwnershipTransferred_RecipientNotification\n} from \"./LSP0Constants.sol\";\nimport {\n    _INTERFACEID_LSP1,\n    _INTERFACEID_LSP1_DELEGATE,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY\n} from \"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\";\nimport {\n    _INTERFACEID_LSP14\n} from \"@lukso/lsp14-contracts/contracts/LSP14Constants.sol\";\n\nimport {\n    _LSP17_EXTENSION_PREFIX\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\";\nimport {\n    _INTERFACEID_LSP20_CALL_VERIFICATION\n} from \"@lukso/lsp20-contracts/contracts/LSP20Constants.sol\";\n\n// errors\nimport {\n    ERC725Y_DataKeysValuesLengthMismatch,\n    ERC725Y_DataKeysValuesEmptyArray\n} from \"@erc725/smart-contracts/contracts/errors.sol\";\nimport {\n    NoExtensionFoundForFunctionSelector\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\";\n\n/**\n * @title The Core Implementation of [LSP-0-ERC725Account] Standard.\n *\n * @author Fabian Vogelsteller <fabian@lukso.network>, Jean Cavallera (CJ42)\n */\nabstract contract LSP0ERC725AccountCore is\n    ERC725XCore,\n    ERC725YCore,\n    IERC1271,\n    ILSP0ERC725Account,\n    ILSP1UniversalReceiver,\n    LSP14Ownable2Step,\n    LSP17Extendable,\n    LSP20CallVerification\n{\n    using ERC165Checker for address;\n    using LSP1Utils for address;\n    using Address for address;\n\n    /**\n     * @dev Executed:\n     * - When receiving some native tokens without any additional data.\n     * - On empty calls to the contract.\n     *\n     * @custom:info This function internally delegates the handling of native tokens to the {universalReceiver} function\n     * passing `_TYPEID_LSP0_VALUE_RECEIVED` as typeId and an empty bytes array as received data.\n     *\n     * * @custom:events Emits a {UniversalReceiver} event with typeId {`LSP0ValueReceived`} when the `universalReceiver` logic is executed upon receiving native tokens.\n     */\n    receive() external payable virtual {\n        if (msg.value != 0) {\n            universalReceiver(_TYPEID_LSP0_VALUE_RECEIVED, \"\");\n        }\n    }\n\n    /**\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\n     *\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\n     * forwarding the function call to the extension address mapped to the function being called.\n     *\n     * This function is executed when:\n     *    - Sending data of length less than 4 bytes to the contract.\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\n     *    - Receiving native tokens with some calldata.\n     *\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\n     *\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\n     *\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\n     *\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), return.\n     *\n     * @custom:info Whenever the call is associated with native tokens, the function will delegate the handling of native tokens internally to the {universalReceiver} function\n     * passing `_TYPEID_LSP0_VALUE_RECEIVED` as typeId and the calldata as received data, except when the native token will be sent directly to the extension.\n     *\n     *      * @custom:events {UniversalReceiver} event with typeId {`LSP0ValueReceived`} when receiving native tokens and extension function selector is not found or not payable.\n     */\n    // solhint-disable-next-line no-complex-fallback\n    fallback(\n        bytes calldata callData\n    ) external payable virtual returns (bytes memory) {\n        if (msg.data.length < 4) {\n            // if value is associated with the extension call, use the universalReceiver\n            if (msg.value != 0) {\n                universalReceiver(_TYPEID_LSP0_VALUE_RECEIVED, callData);\n            }\n            return \"\";\n        }\n\n        return _fallbackLSP17Extendable(callData);\n    }\n\n    /**\n     * @inheritdoc ILSP0ERC725Account\n     *\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) public virtual override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i; i < data.length; ) {\n            (bool success, bytes memory result) = address(this).delegatecall(\n                data[i]\n            );\n\n            if (!success) {\n                // Look for revert reason and bubble it up if present\n                if (result.length != 0) {\n                    // The easiest way to bubble the revert reason is using memory via assembly\n                    // solhint-disable no-inline-assembly\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        let returndata_size := mload(result)\n                        revert(add(32, result), returndata_size)\n                    }\n                } else {\n                    revert(\"LSP0: batchCalls reverted\");\n                }\n            }\n\n            results[i] = result;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc ERC725XCore\n     *\n     * @custom:requirements\n     * - Can be only called by the {owner} or by an authorised address that pass the verification check performed on the owner.\n     * - If a `value` is provided, the contract must have at least this amount in its balance to execute successfully.\n     * - If the operation type is `CREATE` (1) or `CREATE2` (2), `target` must be `address(0)`.\n     * - If the operation type is `STATICCALL` (3) or `DELEGATECALL` (4), `value` transfer is disallowed and must be 0.\n     *\n     * @custom:events\n     * - {Executed} event for each call that uses under `operationType`: `CALL` (0), `STATICCALL` (3) and `DELEGATECALL` (4).\n     * - {ContractCreated} event, when a contract is created under `operationType`: `CREATE` (1) and `CREATE2` (2).\n     * - {UniversalReceiver} event with typeId {`LSP0ValueReceived`} when receiving native tokens.\n     */\n    function execute(\n        uint256 operationType,\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public payable virtual override returns (bytes memory) {\n        if (msg.value != 0) {\n            emit UniversalReceiver(\n                msg.sender,\n                msg.value,\n                _TYPEID_LSP0_VALUE_RECEIVED,\n                abi.encodePacked(msg.sig),\n                \"\"\n            );\n        }\n\n        address accountOwner = owner();\n\n        // If the caller is the owner perform execute directly\n        if (msg.sender == accountOwner) {\n            return ERC725XCore._execute(operationType, target, value, data);\n        }\n\n        // If the caller is not the owner, call {lsp20VerifyCall} on the owner\n        // Depending on the returnedStatus, a second call is done after execution\n        bool verifyAfter = LSP20CallVerification._verifyCall(accountOwner);\n\n        // Perform the execution\n        bytes memory result = ERC725XCore._execute(\n            operationType,\n            target,\n            value,\n            data\n        );\n\n        // if verifyAfter is true, Call {lsp20VerifyCallResult} on the owner\n        if (verifyAfter) {\n            LSP20CallVerification._verifyCallResult(\n                accountOwner,\n                abi.encode(result)\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     * @inheritdoc ERC725XCore\n     *\n     * @custom:requirements\n     * - The length of the parameters provided must be equal.\n     * - Can be only called by the {owner} or by an authorised address that pass the verification check performed on the owner.\n     * - If a `value` is provided, the contract must have at least this amount in its balance to execute successfully.\n     * - If the operation type is `CREATE` (1) or `CREATE2` (2), `target` must be `address(0)`.\n     * - If the operation type is `STATICCALL` (3) or `DELEGATECALL` (4), `value` transfer is disallowed and must be 0.\n     *\n     * @custom:warning\n     * - The `msg.value` should not be trusted for any method called within the batch with `operationType`: `DELEGATECALL` (4).\n     *\n     * @custom:events\n     * - {Executed} event for each call that uses under `operationType`: `CALL` (0), `STATICCALL` (3) and `DELEGATECALL` (4). (each iteration)\n     * - {ContractCreated} event, when a contract is created under `operationType`: `CREATE` (1) and `CREATE2` (2) (each iteration)\n     * - {UniversalReceiver} event with typeId {`LSP0ValueReceived`} when receiving native tokens.\n     */\n    function executeBatch(\n        uint256[] memory operationsType,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) public payable virtual override returns (bytes[] memory) {\n        if (msg.value != 0) {\n            emit UniversalReceiver(\n                msg.sender,\n                msg.value,\n                _TYPEID_LSP0_VALUE_RECEIVED,\n                abi.encodePacked(msg.sig),\n                \"\"\n            );\n        }\n\n        address accountOwner = owner();\n\n        // If the caller is the owner perform execute directly\n        if (msg.sender == accountOwner) {\n            return\n                ERC725XCore._executeBatch(\n                    operationsType,\n                    targets,\n                    values,\n                    datas\n                );\n        }\n\n        // If the caller is not the owner, call {lsp20VerifyCall} on the owner\n        // Depending on the returnedStatus, a second call is done after execution\n        bool verifyAfter = LSP20CallVerification._verifyCall(accountOwner);\n\n        // Perform the execution\n        bytes[] memory results = ERC725XCore._executeBatch(\n            operationsType,\n            targets,\n            values,\n            datas\n        );\n\n        // if verifyAfter is true, Call {lsp20VerifyCallResult} on the owner\n        if (verifyAfter) {\n            LSP20CallVerification._verifyCallResult(\n                accountOwner,\n                abi.encode(results)\n            );\n        }\n\n        return results;\n    }\n\n    /**\n     * @inheritdoc ERC725YCore\n     *\n     * @custom:requirements Can be only called by the {owner} or by an authorised address that pass the verification check performed on the owner.\n     *\n     * @custom:events\n     * - {UniversalReceiver} event with typeId {`LSP0ValueReceived`} when receiving native tokens.\n     * - {DataChanged} event.\n     */\n    function setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) public payable virtual override {\n        if (msg.value != 0) {\n            emit UniversalReceiver(\n                msg.sender,\n                msg.value,\n                _TYPEID_LSP0_VALUE_RECEIVED,\n                abi.encodePacked(msg.sig),\n                \"\"\n            );\n        }\n\n        address accountOwner = owner();\n\n        // If the caller is the owner perform setData directly\n        if (msg.sender == accountOwner) {\n            return _setData(dataKey, dataValue);\n        }\n\n        // If the caller is not the owner, call {lsp20VerifyCall} on the owner\n        // Depending on the returnedStatus, a second call is done after setting data\n        bool verifyAfter = _verifyCall(accountOwner);\n\n        _setData(dataKey, dataValue);\n\n        // If verifyAfter is true, Call {lsp20VerifyCallResult} on the owner\n        // The setData function does not return, second parameter of {_verifyCallResult} will be empty\n        if (verifyAfter) {\n            _verifyCallResult(accountOwner, \"\");\n        }\n    }\n\n    /**\n     * @inheritdoc ERC725YCore\n     *\n     * @custom:requirements Can be only called by the {owner} or by an authorised address that pass the verification check performed on the owner.\n     *\n     * @custom:events\n     * - {UniversalReceiver} event with typeId {`LSP0ValueReceived`} when receiving native tokens.\n     * - {DataChanged} event. (on each iteration of setting data)\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) public payable virtual override {\n        if (msg.value != 0) {\n            emit UniversalReceiver(\n                msg.sender,\n                msg.value,\n                _TYPEID_LSP0_VALUE_RECEIVED,\n                abi.encodePacked(msg.sig),\n                \"\"\n            );\n        }\n\n        if (dataKeys.length != dataValues.length) {\n            revert ERC725Y_DataKeysValuesLengthMismatch();\n        }\n\n        if (dataKeys.length == 0) {\n            revert ERC725Y_DataKeysValuesEmptyArray();\n        }\n\n        address accountOwner = owner();\n\n        // If the caller is the owner perform setData directly\n        if (msg.sender == accountOwner) {\n            for (uint256 i; i < dataKeys.length; ) {\n                _setData(dataKeys[i], dataValues[i]);\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            return;\n        }\n\n        // If the caller is not the owner, call {lsp20VerifyCall} on the owner\n        // Depending on the returnedStatus, a second call is done after setting data\n        bool verifyAfter = _verifyCall(accountOwner);\n\n        for (uint256 i; i < dataKeys.length; ) {\n            _setData(dataKeys[i], dataValues[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // If verifyAfter is true, Call {lsp20VerifyCallResult} on the owner\n        // The setData function does not return, second parameter of {_verifyCallResult} will be empty\n        if (verifyAfter) {\n            _verifyCallResult(accountOwner, \"\");\n        }\n    }\n\n    /**\n     * @notice Notifying the contract by calling its `universalReceiver` function with the following information: typeId: `typeId`; data: `data`.\n     *\n     * @dev Achieves the goal of [LSP-1-UniversalReceiver] by allowing the account to be notified about incoming/outgoing transactions and enabling reactions to these actions.\n     * The reaction is achieved by having two external contracts ([LSP1UniversalReceiverDelegate]) that react on the whole transaction and on the specific typeId, respectively.\n     *\n     * The function performs the following steps:\n     *\n     * 1. Query the [ERC-725Y] storage with the data key [_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY].\n     *      - If there is an address stored under the data key, check if this address supports the LSP1 interfaceId.\n     *\n     *      - If yes, call this address with the typeId and data (params), along with additional calldata consisting of 20 bytes of `msg.sender` and 32 bytes of `msg.value`. If not, continue the execution of the function.\n     *\n     *\n     * 2. Query the [ERC-725Y] storage with the data key [_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX] + `bytes32(typeId)`.\n     *   (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\n     *\n     *      - If there is an address stored under the data key, check if this address supports the LSP1 interfaceId.\n     *\n     *      - If yes, call this address with the typeId and data (params), along with additional calldata consisting of 20 bytes of `msg.sender` and 32 bytes of `msg.value`. If not, continue the execution of the function.\n     *\n     * This function delegates internally the handling of native tokens to the {universalReceiver} function itself passing `_TYPEID_LSP0_VALUE_RECEIVED` as typeId and the calldata as received data.\n     *\n     * @param typeId The type of call received.\n     * @param receivedData The data received.\n     *\n     * @return returnedValues The ABI encoded return value of the LSP1UniversalReceiverDelegate call and the LSP1TypeIdDelegate call.\n     *\n     * @custom:events\n     * - {UniversalReceiver} with typeId {`LSP0ValueReceived`} when receiving native tokens.\n     * - {UniversalReceiver} event with the function parameters, call options, and the response of the UniversalReceiverDelegates (URD) contract that was called.\n     */\n    function universalReceiver(\n        bytes32 typeId,\n        bytes memory receivedData\n    ) public payable virtual override returns (bytes memory returnedValues) {\n        if (msg.value != 0 && (typeId != _TYPEID_LSP0_VALUE_RECEIVED)) {\n            universalReceiver(_TYPEID_LSP0_VALUE_RECEIVED, msg.data);\n        }\n\n        // Query the ERC725Y storage with the data key {_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY}\n        bytes memory lsp1DelegateValue = _getData(\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY\n        );\n        bytes memory resultDefaultDelegate;\n\n        if (lsp1DelegateValue.length >= 20) {\n            address lsp1Delegate = address(bytes20(lsp1DelegateValue));\n\n            // Checking LSP1 InterfaceId support\n            if (\n                lsp1Delegate.supportsERC165InterfaceUnchecked(\n                    _INTERFACEID_LSP1_DELEGATE\n                )\n            ) {\n                resultDefaultDelegate = ILSP1Delegate(lsp1Delegate)\n                    .universalReceiverDelegate(\n                        msg.sender,\n                        msg.value,\n                        typeId,\n                        receivedData\n                    );\n            }\n        }\n\n        // Generate the data key {_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX + <bytes32 typeId>}\n        bytes32 lsp1typeIdDelegateKey = LSP2Utils.generateMappingKey(\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\n            bytes20(typeId)\n        );\n\n        // Query the ERC725Y storage with the data key {_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX + <bytes32 typeId>}\n        bytes memory lsp1TypeIdDelegateValue = _getData(lsp1typeIdDelegateKey);\n        bytes memory resultTypeIdDelegate;\n\n        if (lsp1TypeIdDelegateValue.length >= 20) {\n            address lsp1Delegate = address(bytes20(lsp1TypeIdDelegateValue));\n\n            // Checking LSP1 InterfaceId support\n            if (\n                lsp1Delegate.supportsERC165InterfaceUnchecked(\n                    _INTERFACEID_LSP1_DELEGATE\n                )\n            ) {\n                resultTypeIdDelegate = ILSP1Delegate(lsp1Delegate)\n                    .universalReceiverDelegate(\n                        msg.sender,\n                        msg.value,\n                        typeId,\n                        receivedData\n                    );\n            }\n        }\n\n        returnedValues = abi.encode(\n            resultDefaultDelegate,\n            resultTypeIdDelegate\n        );\n        emit UniversalReceiver(\n            msg.sender,\n            msg.value,\n            typeId,\n            receivedData,\n            returnedValues\n        );\n    }\n\n    /**\n     * @inheritdoc LSP14Ownable2Step\n     *\n     * @custom:requirements\n     * - Can be only called by the {owner} or by an authorised address that pass the verification check performed on the owner.\n     * - When notifying the new owner via LSP1, the `typeId` used must be the `keccak256(...)` hash of [LSP0OwnershipTransferStarted].\n     * - Pending owner cannot accept ownership in the same tx via the LSP1 hook.\n     */\n    function transferOwnership(\n        address pendingNewOwner\n    ) public virtual override(LSP14Ownable2Step, OwnableUnset) {\n        address currentOwner = owner();\n\n        // If the caller is the owner perform transferOwnership directly\n        if (msg.sender == currentOwner) {\n            // set the transfer ownership lock\n            _inTransferOwnership = true;\n\n            // set the pending owner\n            LSP14Ownable2Step._transferOwnership(pendingNewOwner);\n            emit OwnershipTransferStarted(currentOwner, pendingNewOwner);\n\n            // notify the pending owner through LSP1\n            pendingNewOwner.notifyUniversalReceiver(\n                _TYPEID_LSP0_OwnershipTransferStarted,\n                abi.encode(currentOwner, pendingNewOwner)\n            );\n\n            // reset the transfer ownership lock\n            _inTransferOwnership = false;\n        } else {\n            // If the caller is not the owner, call {lsp20VerifyCall} on the owner\n            // Depending on the returnedStatus, a second call is done after transferring ownership\n            bool verifyAfter = _verifyCall(currentOwner);\n\n            // set the transfer ownership lock\n            _inTransferOwnership = true;\n\n            // Set the pending owner if the call is allowed\n            LSP14Ownable2Step._transferOwnership(pendingNewOwner);\n            emit OwnershipTransferStarted(currentOwner, pendingNewOwner);\n\n            // notify the pending owner through LSP1\n            pendingNewOwner.notifyUniversalReceiver(\n                _TYPEID_LSP0_OwnershipTransferStarted,\n                abi.encode(currentOwner, pendingNewOwner)\n            );\n\n            // reset the transfer ownership lock\n            _inTransferOwnership = false;\n\n            // If verifyAfter is true, Call {lsp20VerifyCallResult} on the owner\n            // The transferOwnership function does not return, second parameter of {_verifyCallResult} will be empty\n            if (verifyAfter) {\n                _verifyCallResult(currentOwner, \"\");\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc LSP14Ownable2Step\n     *\n     * @custom:requirements\n     * - Only the {pendingOwner} can call this function.\n     * - When notifying the previous owner via LSP1, the typeId used must be the `keccak256(...)` hash of [LSP0OwnershipTransferred_SenderNotification].\n     * - When notifying the new owner via LSP1, the typeId used must be the `keccak256(...)` hash of [LSP0OwnershipTransferred_RecipientNotification].\n     */\n    function acceptOwnership() public virtual override notInTransferOwnership {\n        address previousOwner = owner();\n        address pendingOwnerAddress = pendingOwner();\n\n        bool verifyAfter;\n\n        if (msg.sender != pendingOwnerAddress) {\n            // If the caller is not the owner, call {lsp20VerifyCall} on the pending owner\n            // Depending on the successStatus returned, a second call is done after transferring ownership\n            verifyAfter = _verifyCall(pendingOwnerAddress);\n\n            _setOwner(pendingOwnerAddress);\n            delete _pendingOwner;\n            delete _renounceOwnershipStartedAt;\n        } else {\n            _acceptOwnership();\n        }\n\n        // notify the previous owner if supports LSP1\n        previousOwner.notifyUniversalReceiver(\n            _TYPEID_LSP0_OwnershipTransferred_SenderNotification,\n            abi.encode(previousOwner, pendingOwnerAddress)\n        );\n\n        // notify the pending owner if supports LSP1\n        pendingOwnerAddress.notifyUniversalReceiver(\n            _TYPEID_LSP0_OwnershipTransferred_RecipientNotification,\n            abi.encode(previousOwner, pendingOwnerAddress)\n        );\n\n        // If msg.sender != pendingOwnerAddress & verifyAfter is true, Call {lsp20VerifyCallResult} on the new owner\n        // The transferOwnership function does not return, second parameter of {_verifyCallResult} will be empty\n        if (verifyAfter) {\n            _verifyCallResult(pendingOwnerAddress, \"\");\n        }\n    }\n\n    /**\n     * @inheritdoc LSP14Ownable2Step\n     *\n     * @custom:requirements Can be only called by the {owner} or by an authorised address that pass the verification check performed on the owner.\n     *\n     * @custom:danger Leaves the contract without an owner. Once ownership of the contract has been renounced, any functions that are restricted to be called by the owner or an address allowed by the owner will be permanently inaccessible, making these functions not callable anymore and unusable.\n     *\n     */\n    function renounceOwnership()\n        public\n        virtual\n        override(LSP14Ownable2Step, OwnableUnset)\n    {\n        address accountOwner = owner();\n\n        // If the caller is the owner perform renounceOwnership directly\n        if (msg.sender == accountOwner) {\n            address previousOwner = owner();\n            LSP14Ownable2Step._renounceOwnership();\n\n            if (owner() == address(0)) {\n                previousOwner.notifyUniversalReceiver(\n                    _TYPEID_LSP0_OwnershipTransferred_SenderNotification,\n                    abi.encode(accountOwner, address(0))\n                );\n            }\n        } else {\n            // If the caller is not the owner, call {lsp20VerifyCall} on the owner\n            // Depending on the returnedStatus, a second call is done after transferring ownership\n            bool verifyAfter = _verifyCall(accountOwner);\n\n            address previousOwner = owner();\n            LSP14Ownable2Step._renounceOwnership();\n\n            if (owner() == address(0)) {\n                previousOwner.notifyUniversalReceiver(\n                    _TYPEID_LSP0_OwnershipTransferred_SenderNotification,\n                    abi.encode(accountOwner, address(0))\n                );\n            }\n\n            // If verifyAfter is true, Call {lsp20VerifyCallResult} on the owner\n            // The transferOwnership function does not return, second parameter of {_verifyCallResult} will be empty\n            if (verifyAfter) {\n                _verifyCallResult(accountOwner, \"\");\n            }\n        }\n    }\n\n    /**\n     * @notice Checking if this contract supports the interface defined by the `bytes4` interface ID `interfaceId`.\n     *\n     * @dev Achieves the goal of [ERC-165] to detect supported interfaces and [LSP-17-ContractExtension] by\n     * checking if the interfaceId being queried is supported on another linked extension.\n     *\n     * If the contract doesn't support the `interfaceId`, it forwards the call to the\n     * `supportsInterface` extension according to [LSP-17-ContractExtension], and checks if the extension\n     * implements the interface defined by `interfaceId`.\n     *\n     * @param interfaceId The interface ID to check if the contract supports it.\n     *\n     * @return `true` if this contract implements the interface defined by `interfaceId`, `false` otherwise.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(ERC725XCore, ERC725YCore, LSP17Extendable)\n        returns (bool)\n    {\n        return\n            interfaceId == _INTERFACEID_ERC1271 ||\n            interfaceId == _INTERFACEID_LSP0 ||\n            interfaceId == _INTERFACEID_LSP1 ||\n            interfaceId == _INTERFACEID_LSP14 ||\n            interfaceId == _INTERFACEID_LSP20_CALL_VERIFICATION ||\n            super.supportsInterface(interfaceId) ||\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\n    }\n\n    /**\n     * @notice Achieves the goal of [EIP-1271] by validating signatures of smart contracts\n     * according to their own logic.\n     *\n     * @dev Handles two cases:\n     *\n     * 1. If the owner is an EOA, recovers an address from the hash and the signature provided:\n     *\n     *      - Returns the `_ERC1271_SUCCESSVALUE` if the address recovered is the same as the owner, indicating that it was a valid signature.\n     *\n     *      - If the address is different, it returns the `_ERC1271_FAILVALUE` indicating that the signature is not valid.\n     *\n     * 2. If the owner is a smart contract, it forwards the call of {isValidSignature()} to the owner contract:\n     *\n     *      - If the contract fails or returns the `_ERC1271_FAILVALUE`, the {isValidSignature()} on the account returns the `_ERC1271_FAILVALUE`, indicating that the signature is not valid.\n     *\n     *      - If the {isValidSignature()} on the owner returned the `_ERC1271_SUCCESSVALUE`, the {isValidSignature()} on the account returns the `_ERC1271_SUCCESSVALUE`, indicating that it's a valid signature.\n     *\n     * @param dataHash The hash of the data to be validated.\n     * @param signature A signature that can validate the previous parameter (Hash).\n     *\n     * @return returnedStatus A `bytes4` value that indicates if the signature is valid or not.\n     *\n     * @custom:warning This function does not enforce by default the inclusion of the address of this contract in the signature digest.\n     * It is recommended that protocols or applications using this contract include the targeted address (= this contract) in the data to sign.\n     * To ensure that a signature is valid for a specific LSP0ERC725Account and prevent signatures from the same EOA to be replayed\n     * across different LSP0ERC725Accounts.\n     */\n    function isValidSignature(\n        bytes32 dataHash,\n        bytes memory signature\n    ) public view virtual override returns (bytes4 returnedStatus) {\n        address _owner = owner();\n\n        // If owner is a contract\n        if (_owner.code.length != 0) {\n            (bool success, bytes memory result) = _owner.staticcall(\n                abi.encodeWithSelector(\n                    IERC1271.isValidSignature.selector,\n                    dataHash,\n                    signature\n                )\n            );\n\n            bool isValid = (success &&\n                result.length == 32 &&\n                abi.decode(result, (bytes32)) ==\n                bytes32(_ERC1271_SUCCESSVALUE));\n\n            return isValid ? _ERC1271_SUCCESSVALUE : _ERC1271_FAILVALUE;\n        }\n        // If owner is an EOA\n        else {\n            // if isValidSignature fail, the error is catched in returnedError\n            (address recoveredAddress, ECDSA.RecoverError returnedError) = ECDSA\n                .tryRecover(dataHash, signature);\n\n            // if recovering throws an error, return the fail value\n            if (returnedError != ECDSA.RecoverError.NoError)\n                return _ERC1271_FAILVALUE;\n\n            // if recovering is successful and the recovered address matches the owner's address,\n            // return the ERC1271 success value. Otherwise, return the ERC1271 fail value\n            // matches the address of the owner, otherwise return fail value\n            return\n                recoveredAddress == _owner\n                    ? _ERC1271_SUCCESSVALUE\n                    : _ERC1271_FAILVALUE;\n        }\n    }\n\n    // Internal functions\n\n    /**\n     * @dev Forwards the call to an extension mapped to a function selector.\n     *\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n     * called on the account. If there is no extension, the `address(0)` will be returned.\n     * Forwards the value sent with the call to the extension if the function selector is mapped to a payable extension.\n     *\n     * Reverts if there is no extension for the function being called, except for the `bytes4(0)` function selector, which passes even if there is no extension for it.\n     *\n     * If there is an extension for the function selector being called, it calls the extension with the\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\n     *\n     * @custom:hint If you would like to forward the `msg.value` to the extension contract, you should store an additional `0x01` byte after the address of the extension under the corresponding LSP17 data key.\n     */\n    function _fallbackLSP17Extendable(\n        bytes calldata callData\n    ) internal virtual override returns (bytes memory) {\n        // If there is a function selector\n        (\n            address extension,\n            bool isForwardingValue\n        ) = _getExtensionAndForwardValue(msg.sig);\n\n        // if value is associated with the extension call and extension function selector is not payable, use the universalReceiver\n        if (msg.value != 0 && !isForwardingValue) {\n            universalReceiver(_TYPEID_LSP0_VALUE_RECEIVED, callData);\n        }\n\n        // if no extension was found for bytes4(0) return don't revert\n        if (msg.sig == bytes4(0) && extension == address(0)) return \"\";\n\n        // if no extension was found for other function selectors, revert\n        if (extension == address(0))\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\n\n        (bool success, bytes memory result) = extension.call{\n            value: isForwardingValue ? msg.value : 0\n        }(abi.encodePacked(callData, msg.sender, msg.value));\n\n        if (success) {\n            return result;\n        } else {\n            // `mload(result)` -> offset in memory where `result.length` is located\n            // `add(result, 32)` -> offset in memory where `result` data starts\n            assembly {\n                let resultdata_size := mload(result)\n                revert(add(result, 32), resultdata_size)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the extension address and the boolean indicating whether to forward the value received to the extension, stored under the following data key:\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\n     * - If no extension is stored, returns the address(0).\n     * - If the stored value is 20 bytes, return false for the boolean\n     */\n    function _getExtensionAndForwardValue(\n        bytes4 functionSelector\n    ) internal view virtual override returns (address, bool) {\n        // Generate the data key relevant for the functionSelector being called\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\n            _LSP17_EXTENSION_PREFIX,\n            functionSelector\n        );\n\n        bytes memory extensionData = ERC725YCore._getData(\n            mappedExtensionDataKey\n        );\n\n        // Prevent casting data shorter than 20 bytes to an address to avoid\n        // unintentionally calling a different extension, return address(0) instead.\n        if (extensionData.length < 20) {\n            return (address(0), false);\n        }\n\n        // CHECK if the `extensionData` is 21 bytes long\n        // - 20 bytes = extension's address\n        // - 1 byte `0x01` as a boolean indicating if the contract should forward the value to the extension or not\n        if (extensionData.length == 21) {\n            // If the last byte is set to `0x01` (`true`)\n            // this indicates that the contract should forward the value to the extension\n            if (extensionData[20] == 0x01) {\n                // Return the address of the extension\n                return (address(bytes20(extensionData)), true);\n            }\n        }\n\n        return (address(bytes20(extensionData)), false);\n    }\n}\n"
    },
    "@lukso/lsp0-contracts/contracts/Version.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nabstract contract Version {\n    /**\n     * @dev Get the version of the contract.\n     * @notice Contract version.\n     *\n     * @return The version of the the contract.\n     */\n    // DO NOT CHANGE\n    // Comments block below is used by release-please to automatically update the version in this file.\n    // x-release-please-start-version\n    string public constant VERSION = \"0.15.1\";\n\n    // x-release-please-end\n}\n"
    },
    "@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\n */\ninterface ILSP1UniversalReceiver {\n    /**\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\n     *\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\n     * @param value The amount sent to the {universalReceiver(...)} function.\n     * @param typeId A `bytes32` unique identifier (= _\"hook\"_) that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\n     */\n    event UniversalReceiver(\n        address indexed from,\n        uint256 indexed value,\n        bytes32 indexed typeId,\n        bytes receivedData,\n        bytes returnedValue\n    );\n\n    /**\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\n     * @notice Reacted on received notification with `typeId` & `data`.\n     *\n     * @param typeId The hash of a specific standard or a hook.\n     * @param data The arbitrary data received with the call.\n     *\n     * @custom:events {UniversalReceiver} event.\n     */\n    function universalReceiver(\n        bytes32 typeId,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n}\n"
    },
    "@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiverDelegate.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface of the LSP1 - Universal Receiver Delegate standard.\n * @dev This interface allows contracts implementing the LSP1UniversalReceiver function to delegate the reaction logic to another contract or account. By doing so, the main logic doesn't need to reside within the `universalReceiver` function itself, offering modularity and flexibility.\n */\ninterface ILSP1UniversalReceiverDelegate {\n    /**\n     * @dev A delegate function that reacts to calls forwarded from the `universalReceiver(..)` function. This allows for modular handling of the logic based on the `typeId` and `data` provided by the initial caller.\n     * @notice Reacted on received notification forwarded from `universalReceiver` with `typeId` & `data`.\n     *\n     * @param sender The address of the EOA or smart contract that initially called the `universalReceiver` function.\n     * @param value The amount sent by the `sender` to the `universalReceiver` function.\n     * @param typeId The hash of a specific standard or a hook.\n     * @param data The arbitrary data received with the initial call to `universalReceiver`.\n     */\n    function universalReceiverDelegate(\n        address sender,\n        uint256 value,\n        bytes32 typeId,\n        bytes memory data\n    ) external returns (bytes memory);\n}\n"
    },
    "@lukso/lsp1-contracts/contracts/LSP1Constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\n\n// --- ERC725Y Data Keys\n\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\n\n// keccak256('LSP1UniversalReceiverDelegate')\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\n"
    },
    "@lukso/lsp1-contracts/contracts/LSP1Utils.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// libraries\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {LSP2Utils} from \"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\";\n\n// constants\nimport {ILSP1UniversalReceiver as ILSP1} from \"./ILSP1UniversalReceiver.sol\";\n\n// constants\nimport {\n    _INTERFACEID_LSP1,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\n} from \"./LSP1Constants.sol\";\n\n/**\n * @title LSP1 Utility library.\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\n * that implements LSP1 and retrieve information related to LSP1 `typeId`.\n * Based on LSP1 Universal Receiver standard.\n */\nlibrary LSP1Utils {\n    using ERC165Checker for address;\n\n    /**\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\n     * supports the LSP1 interface.\n     *\n     * @param lsp1Implementation The address of the contract to notify.\n     * @param typeId A `bytes32` typeId.\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\n     */\n    function notifyUniversalReceiver(\n        address lsp1Implementation,\n        bytes32 typeId,\n        bytes memory data\n    ) internal {\n        if (\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\n                _INTERFACEID_LSP1\n            )\n        ) {\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\n        }\n    }\n\n    /**\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\n     *\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\n     *\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\n     */\n    function getLSP1DelegateValue(\n        mapping(bytes32 => bytes) storage erc725YStorage\n    ) internal view returns (bytes memory) {\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\n    }\n\n    /**\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\n     *\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\n     *\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n     * @param typeId A bytes32 LSP1 `typeId`;\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\n     */\n    function getLSP1DelegateValueForTypeId(\n        mapping(bytes32 => bytes) storage erc725YStorage,\n        bytes32 typeId\n    ) internal view returns (bytes memory) {\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\n            bytes20(typeId)\n        );\n        return erc725YStorage[lsp1TypeIdDataKey];\n    }\n}\n"
    },
    "@lukso/lsp14-contracts/contracts/ILSP14Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface of the LSP14 - Ownable 2-step standard, an extension of the [EIP173] (Ownable) standard with 2-step process to transfer or renounce ownership.\n */\ninterface ILSP14Ownable2Step {\n    /**\n     * @dev Emitted when {transferOwnership(..)} was called and the first step of transferring ownership completed successfully which leads to {pendingOwner} being updated.\n     * @notice The transfer of ownership of the contract was initiated. Pending new owner set to: `newOwner`.\n     * @param previousOwner The address of the previous owner.\n     * @param newOwner The address of the new owner.\n     */\n    event OwnershipTransferStarted(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @inheritdoc OwnableUnset\n     * event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n     */\n\n    /**\n     * @dev Emitted when starting the {renounceOwnership(..)} 2-step process.\n     * @notice Ownership renouncement initiated.\n     */\n    event RenounceOwnershipStarted();\n\n    /**\n     * @dev Emitted when the ownership of the contract has been renounced.\n     * @notice Successfully renounced ownership of the contract. This contract is now owned by anyone, it's owner is `address(0)`.\n     */\n    event OwnershipRenounced();\n\n    /**\n     * @inheritdoc OwnableUnset\n     * function {owner()} external view returns (address);\n     */\n\n    /**\n     * @dev The address that ownership of the contract is transferred to.\n     * This address may use {acceptOwnership()} to gain ownership of the contract.\n     */\n    function pendingOwner() external view returns (address);\n\n    /**\n     * @dev Initiate the process of transferring ownership of the contract by setting the new owner as the pending owner.\n     *\n     * If the new owner is a contract that supports + implements LSP1, this will also attempt to notify the new owner that ownership has been transferred to them by calling the {universalReceiver()} function on the `newOwner` contract.\n     *\n     * @notice Transfer ownership initiated by `newOwner`.\n     *\n     * @param newOwner The address of the new owner.\n     */\n    function transferOwnership(address newOwner) external;\n\n    /**\n     * @dev Transfer ownership of the contract from the current {owner()} to the {pendingOwner()}.\n     *\n     * Once this function is called:\n     * - The current {owner()} will lose access to the functions restricted to the {owner()} only.\n     * - The {pendingOwner()} will gain access to the functions restricted to the {owner()} only.\n     *\n     * @notice `msg.sender` is accepting ownership of contract: `address(this)`.\n     */\n    function acceptOwnership() external;\n\n    /**\n     * @dev Renounce ownership of the contract in a 2-step process.\n     *\n     * 1. The first call will initiate the process of renouncing ownership.\n     * 2. The second call is used as a confirmation and will leave the contract without an owner.\n     *\n     * @notice `msg.sender` is renouncing ownership of contract `address(this)`.\n     */\n    function renounceOwnership() external;\n}\n"
    },
    "@lukso/lsp14-contracts/contracts/LSP14Constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nbytes4 constant _INTERFACEID_LSP14 = 0x94be5999;\n\n// --- Type IDs\n\n// keccak256('LSP14OwnershipTransferStarted')\nbytes32 constant _TYPEID_LSP14_OwnershipTransferStarted = 0xee9a7c0924f740a2ca33d59b7f0c2929821ea9837ce043ce91c1823e9c4e52c0;\n\n// keccak256('LSP14OwnershipTransferred_SenderNotification')\nbytes32 constant _TYPEID_LSP14_OwnershipTransferred_SenderNotification = 0xa124442e1cc7b52d8e2ede2787d43527dc1f3ae0de87f50dd03e27a71834f74c;\n\n// keccak256('LSP14OwnershipTransferred_RecipientNotification')\nbytes32 constant _TYPEID_LSP14_OwnershipTransferred_RecipientNotification = 0xe32c7debcb817925ba4883fdbfc52797187f28f73f860641dab1a68d9b32902c;\n"
    },
    "@lukso/lsp14-contracts/contracts/LSP14Errors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev Reverts when trying to renounce ownership before the initial confirmation delay.\n * @notice Cannot confirm ownership renouncement yet. The ownership renouncement is allowed from: `renounceOwnershipStart` until: `renounceOwnershipEnd`.\n *\n * @param renounceOwnershipStart The start timestamp when one can confirm the renouncement of ownership.\n * @param renounceOwnershipEnd The end timestamp when one can confirm the renouncement of ownership.\n */\nerror LSP14NotInRenounceOwnershipInterval(\n    uint256 renounceOwnershipStart,\n    uint256 renounceOwnershipEnd\n);\n\n/**\n * @dev Reverts when trying to transfer ownership to the `address(this)`.\n * @notice Cannot transfer ownership to the address of the contract itself.\n */\nerror LSP14CannotTransferOwnershipToSelf();\n\n/**\n * @dev Reverts when pending owner accept ownership in the same transaction of transferring ownership.\n * @notice Cannot accept ownership in the same transaction with {transferOwnership(...)}.\n */\nerror LSP14MustAcceptOwnershipInSeparateTransaction();\n\n/**\n * @dev Reverts when the `caller` that is trying to accept ownership of the contract is not the pending owner.\n * @param caller The address that tried to accept ownership.\n */\nerror LSP14CallerNotPendingOwner(address caller);\n"
    },
    "@lukso/lsp14-contracts/contracts/LSP14Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {ILSP14Ownable2Step} from \"./ILSP14Ownable2Step.sol\";\n\n// modules\nimport {\n    OwnableUnset\n} from \"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\";\n\n// libraries\nimport {LSP1Utils} from \"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\";\n\n// errors\nimport {\n    LSP14CallerNotPendingOwner,\n    LSP14MustAcceptOwnershipInSeparateTransaction,\n    LSP14CannotTransferOwnershipToSelf,\n    LSP14NotInRenounceOwnershipInterval\n} from \"./LSP14Errors.sol\";\n\n// constants\nimport {\n    _TYPEID_LSP14_OwnershipTransferStarted,\n    _TYPEID_LSP14_OwnershipTransferred_SenderNotification,\n    _TYPEID_LSP14_OwnershipTransferred_RecipientNotification\n} from \"./LSP14Constants.sol\";\n\n/**\n * @title LSP14Ownable2Step\n * @author Fabian Vogelsteller <fabian@lukso.network>, Jean Cavallera (CJ42), Yamen Merhi (YamenMerhi), Daniel Afteni (B00ste)\n * @dev This contract is a modified version of the [`OwnableUnset.sol`] implementation, where transferring and renouncing ownership works as a 2-step process. This can be used as a confirmation mechanism to prevent potential mistakes when transferring ownership of the contract, where the control of the contract could be lost forever. (_e.g: providing the wrong address as a parameter to the function, transferring ownership to an EOA for which the user lost its private key, etc..._)\n */\nabstract contract LSP14Ownable2Step is ILSP14Ownable2Step, OwnableUnset {\n    using LSP1Utils for address;\n\n    /**\n     * @dev The number of block that MUST pass before one is able to confirm renouncing ownership.\n     * @return Number of blocks.\n     */\n    uint256 public constant RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY = 200;\n\n    /**\n     * @dev The number of blocks during which one can renounce ownership.\n     * @return Number of blocks.\n     */\n    uint256 public constant RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD = 200;\n\n    /**\n     * @dev The block number saved when initiating the process of renouncing ownership.\n     */\n    uint256 internal _renounceOwnershipStartedAt;\n\n    /**\n     * @dev see {pendingOwner()}\n     */\n    address internal _pendingOwner;\n\n    /**\n     * @dev The boolean that indicates whether the contract is in an active ownership transfer phase\n     */\n    bool internal _inTransferOwnership;\n\n    /**\n     * @dev reverts when {_inTransferOwnership} variable is true\n     */\n    modifier notInTransferOwnership() virtual {\n        if (_inTransferOwnership) {\n            revert LSP14MustAcceptOwnershipInSeparateTransaction();\n        }\n        _;\n    }\n\n    /**\n     * @inheritdoc ILSP14Ownable2Step\n     *\n     * @custom:info If no ownership transfer is in progress, the pendingOwner will be `address(0).`.\n     */\n    function pendingOwner() public view virtual override returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @inheritdoc ILSP14Ownable2Step\n     *\n     * @custom:requirements `newOwner` cannot accept ownership of the contract in the same transaction. (For instance, via a callback from its {universalReceiver(...)} function).\n     */\n    function transferOwnership(\n        address newOwner\n    ) public virtual override(OwnableUnset, ILSP14Ownable2Step) onlyOwner {\n        // set the transfer ownership lock\n        _inTransferOwnership = true;\n\n        _transferOwnership(newOwner);\n\n        address currentOwner = owner();\n        emit OwnershipTransferStarted(currentOwner, newOwner);\n\n        newOwner.notifyUniversalReceiver(\n            _TYPEID_LSP14_OwnershipTransferStarted,\n            abi.encode(currentOwner, newOwner)\n        );\n\n        // reset the transfer ownership lock\n        _inTransferOwnership = false;\n    }\n\n    /**\n     * @inheritdoc ILSP14Ownable2Step\n     *\n     * @custom:requirements This function can only be called by the {pendingOwner()}.\n     */\n    function acceptOwnership() public virtual override notInTransferOwnership {\n        address previousOwner = owner();\n\n        _acceptOwnership();\n\n        previousOwner.notifyUniversalReceiver(\n            _TYPEID_LSP14_OwnershipTransferred_SenderNotification,\n            abi.encode(previousOwner, msg.sender)\n        );\n\n        msg.sender.notifyUniversalReceiver(\n            _TYPEID_LSP14_OwnershipTransferred_RecipientNotification,\n            abi.encode(previousOwner, msg.sender)\n        );\n    }\n\n    /**\n     * @inheritdoc ILSP14Ownable2Step\n     *\n     * @custom:danger Leaves the contract without an owner. Once ownership of the contract has been renounced, any function that is restricted to be called only by the owner will be permanently inaccessible, making these functions not callable anymore and unusable.\n     */\n    function renounceOwnership()\n        public\n        virtual\n        override(OwnableUnset, ILSP14Ownable2Step)\n        onlyOwner\n    {\n        address previousOwner = owner();\n        _renounceOwnership();\n\n        if (owner() == address(0)) {\n            previousOwner.notifyUniversalReceiver(\n                _TYPEID_LSP14_OwnershipTransferred_SenderNotification,\n                abi.encode(previousOwner, address(0))\n            );\n        }\n    }\n\n    // --- Internal methods\n\n    /**\n     * @dev Set the pending owner of the contract and cancel any renounce ownership process that was previously started.\n     *\n     * @param newOwner The address of the new pending owner.\n     *\n     * @custom:requirements `newOwner` cannot be the address of the contract itself.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        if (newOwner == address(this))\n            revert LSP14CannotTransferOwnershipToSelf();\n\n        _pendingOwner = newOwner;\n        delete _renounceOwnershipStartedAt;\n    }\n\n    /**\n     * @dev Set the pending owner of the contract as the new owner.\n     */\n    function _acceptOwnership() internal virtual {\n        if (msg.sender != pendingOwner())\n            revert LSP14CallerNotPendingOwner(msg.sender);\n\n        _setOwner(msg.sender);\n        delete _pendingOwner;\n        delete _renounceOwnershipStartedAt;\n    }\n\n    /**\n     * @dev Initiate or confirm the process of renouncing ownership after a specific delay of blocks have passed.\n     */\n    function _renounceOwnership() internal virtual {\n        uint256 currentBlock = block.number;\n        uint256 confirmationPeriodStart = _renounceOwnershipStartedAt +\n            RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY;\n        uint256 confirmationPeriodEnd = confirmationPeriodStart +\n            RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD;\n\n        // On the creation of a new network, `currentBlock` will be smaller than `confirmationPeriodEnd`,\n        // `_renounceOwnershipStartedAt == 0` will indicate that a renounceOwnership call is happening for the first time\n        if (\n            currentBlock > confirmationPeriodEnd ||\n            _renounceOwnershipStartedAt == 0\n        ) {\n            _renounceOwnershipStartedAt = currentBlock;\n            delete _pendingOwner;\n            emit RenounceOwnershipStarted();\n            return;\n        }\n\n        if (currentBlock < confirmationPeriodStart) {\n            revert LSP14NotInRenounceOwnershipInterval(\n                confirmationPeriodStart,\n                confirmationPeriodEnd\n            );\n        }\n\n        _setOwner(address(0));\n        delete _renounceOwnershipStartedAt;\n        delete _pendingOwner;\n        emit OwnershipRenounced();\n    }\n}\n"
    },
    "@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\n\n// bytes4(keccack256(\"LSP17Extendable\"))\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\n\n// bytes4(keccack256(\"LSP17Extension\"))\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\n\n// --- ERC725Y Data Keys\n\n// Extension Handler Prefix\n\n// bytes10(keccak256('LSP17Extension'))\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\n"
    },
    "@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev reverts when there is no extension for the function selector being called with\n */\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\n\n/**\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\n */\nerror InvalidFunctionSelector(bytes data);\n\n/**\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\n */\nerror InvalidExtensionAddress(bytes storedData);\n"
    },
    "@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\n// constants\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \"./LSP17Constants.sol\";\n\n// errors\nimport {NoExtensionFoundForFunctionSelector} from \"./LSP17Errors.sol\";\n\n/**\n * @title Module to add more functionalities to a contract using extensions.\n *\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\n * This module can be inherited to extend the functionality of the parent contract when\n * calling a function that doesn't exist on the parent contract via forwarding the call\n * to an extension mapped to the function selector being called, set originally by the parent contract\n */\nabstract contract LSP17Extendable is ERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        return\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\n     * {supportsInterface} selector.\n     *\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\n     * extension if the extension is set, if not it returns false.\n     */\n    function _supportsInterfaceInERC165Extension(\n        bytes4 interfaceId\n    ) internal view virtual returns (bool) {\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\n            ERC165.supportsInterface.selector\n        );\n        if (erc165Extension == address(0)) return false;\n\n        return\n            ERC165Checker.supportsERC165InterfaceUnchecked(\n                erc165Extension,\n                interfaceId\n            );\n    }\n\n    /**\n     * @dev Returns the extension mapped to a specific function selector\n     * If no extension was found, return the address(0)\n     * To be overrided.\n     * Up to the implementor contract to return an extension based on a function selector\n     */\n    function _getExtensionAndForwardValue(\n        bytes4 functionSelector\n    ) internal view virtual returns (address, bool);\n\n    /**\n     * @dev Forwards the call to an extension mapped to a function selector.\n     *\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n     * called on the account. If there is no extension, the `address(0)` will be returned.\n     * Forwards the value if the extension is payable.\n     *\n     * Reverts if there is no extension for the function being called.\n     *\n     * If there is an extension for the function selector being called, it calls the extension with the\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\n     *\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\n     *\n     * ```solidity\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\n     *     abi.encodePacked(callData, msg.sender, msg.value)\n     * );\n     * ```\n     */\n    function _fallbackLSP17Extendable(\n        bytes calldata callData\n    ) internal virtual returns (bytes memory) {\n        // If there is a function selector\n        (\n            address extension,\n            bool shouldForwardValue\n        ) = _getExtensionAndForwardValue(msg.sig);\n\n        // if no extension was found, revert\n        if (extension == address(0))\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\n\n        (bool success, bytes memory result) = extension.call{\n            value: shouldForwardValue ? msg.value : 0\n        }(abi.encodePacked(callData, msg.sender, msg.value));\n\n        if (success) {\n            return result;\n        } else {\n            // `mload(result)` -> offset in memory where `result.length` is located\n            // `add(result, 32)` -> offset in memory where `result` data starts\n            // solhint-disable no-inline-assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let resultdata_size := mload(result)\n                revert(add(result, 32), resultdata_size)\n            }\n        }\n    }\n}\n"
    },
    "@lukso/lsp2-contracts/contracts/LSP2Utils.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {\n    IERC725Y\n} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @title LSP2 Utility library.\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\n * defined on the LSP2 standard.\n * Based on LSP2 ERC725Y JSON Schema standard.\n */\nlibrary LSP2Utils {\n    /**\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\n     *\n     * ```\n     * keccak256(\"keyName\")\n     * ```\n     *\n     * @param keyName The string to hash to generate a Singleton data key.\n     *\n     * @return The generated `bytes32` data key of key type Singleton.\n     */\n    function generateSingletonKey(\n        string memory keyName\n    ) internal pure returns (bytes32) {\n        return keccak256(bytes(keyName));\n    }\n\n    /**\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\n     *\n     * ```\n     * keccak256(\"arrayKeyName[]\")\n     * ```\n     *\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\n     *\n     * @return The generated `bytes32` data key of key type Array.\n     *\n     * @custom:requirements\n     * - The `keyName` must include at the end of the string the square brackets `\"[]\"`.\n     */\n    function generateArrayKey(\n        string memory arrayKeyName\n    ) internal pure returns (bytes32) {\n        bytes memory dataKey = bytes(arrayKeyName);\n        require(dataKey.length >= 2, \"MUST be longer than 2 characters\");\n        require(\n            dataKey[dataKey.length - 2] == 0x5b && // \"[\" in utf8 encoded\n                dataKey[dataKey.length - 1] == 0x5d, // \"]\" in utf8\n            \"Missing empty square brackets '[]' at the end of the key name\"\n        );\n\n        return keccak256(dataKey);\n    }\n\n    /**\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\n     * with the 16 bytes of `index`. As:\n     *\n     * ```\n     * arrayKey[index]\n     * ```\n     *\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\n     * @param index The index number in the `arrayKey`.\n     *\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\n     */\n    function generateArrayElementKeyAtIndex(\n        bytes32 arrayKey,\n        uint128 index\n    ) internal pure returns (bytes32) {\n        bytes memory elementInArray = bytes.concat(\n            bytes16(arrayKey),\n            bytes16(index)\n        );\n        return bytes32(elementInArray);\n    }\n\n    /**\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\n     *\n     * ```\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\n     */\n    function generateMappingKey(\n        string memory firstWord,\n        string memory lastWord\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes10(firstWordHash),\n            bytes2(0),\n            bytes20(lastWordHash)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\n     *\n     * ```\n     * bytes10(firstWordHash):0000:<address>\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\n     * @param addr An address to map `firstWord` to.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\n     */\n    function generateMappingKey(\n        string memory firstWord,\n        address addr\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes10(firstWordHash),\n            bytes2(0),\n            bytes20(addr)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\n     *\n     * ```\n     * keyPrefix:bytes20Value\n     * ```\n     *\n     * @param keyPrefix The first part of the data key of key type Mapping.\n     * @param bytes20Value The second part of the data key of key type Mapping.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\n     */\n    function generateMappingKey(\n        bytes10 keyPrefix,\n        bytes20 bytes20Value\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            bytes2(0),\n            bytes20Value\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\n     *\n     * ```\n     * bytes6(keccak256(\"firstWord\")):bytes4(keccak256(\"secondWord\")):0000:<address>\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\n     * @param addr The address that makes the last part of the MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\n     */\n    function generateMappingWithGroupingKey(\n        string memory firstWord,\n        string memory secondWord,\n        address addr\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes6(firstWordHash),\n            bytes4(secondWordHash),\n            bytes2(0),\n            bytes20(addr)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\n     *\n     * ```\n     * keyPrefix:mapPrefix:0000:subMapKey\n     * ```\n     *\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\n     */\n    function generateMappingWithGroupingKey(\n        bytes6 keyPrefix,\n        bytes4 mapPrefix,\n        bytes20 subMapKey\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            mapPrefix,\n            bytes2(0),\n            subMapKey\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\n     *\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\n     */\n    function generateMappingWithGroupingKey(\n        bytes10 keyPrefix,\n        bytes20 bytes20Value\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            bytes2(0),\n            bytes20Value\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a JSONURL value content.\n     * @param hashFunction The function used to hash the JSON file.\n     * @param json Bytes value of the JSON file.\n     * @param url The URL where the JSON file is hosted.\n     */\n    function generateJSONURLValue(\n        string memory hashFunction,\n        string memory json,\n        string memory url\n    ) internal pure returns (bytes memory) {\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\n        bytes32 jsonDigest = keccak256(bytes(json));\n\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\n    }\n\n    /**\n     * @dev Generate a ASSETURL value content.\n     *\n     * @param hashFunction The function used to hash the JSON file.\n     * @param assetBytes Bytes value of the JSON file.\n     * @param url The URL where the JSON file is hosted.\n     *\n     * @return The encoded value as an `ASSETURL`.\n     */\n    function generateASSETURLValue(\n        string memory hashFunction,\n        string memory assetBytes,\n        string memory url\n    ) internal pure returns (bytes memory) {\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\n\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\n    }\n\n    /**\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\n     *\n     * @param compactBytesArray The bytes value to verify.\n     *\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\n     */\n    function isCompactBytesArray(\n        bytes memory compactBytesArray\n    ) internal pure returns (bool) {\n        /**\n         * Pointer will always land on these values:\n         *\n         * ↓↓↓↓\n         * 0003 a00000\n         * 0005 fff83a0011\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\n         * 0012 bb000000000000000000000000000000beef\n         * 0019 cc00000000000000000000000000000000000000000000deed\n         * ↑↑↑↑\n         *\n         * The pointer can only land on the length of the following bytes value.\n         */\n        uint256 pointer = 0;\n\n        /**\n         * Check each length byte and make sure that when you reach the last length byte.\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\n         */\n        while (pointer < compactBytesArray.length) {\n            if (pointer + 1 >= compactBytesArray.length) return false;\n            uint256 elementLength = uint16(\n                bytes2(\n                    abi.encodePacked(\n                        compactBytesArray[pointer],\n                        compactBytesArray[pointer + 1]\n                    )\n                )\n            );\n            pointer += elementLength + 2;\n        }\n        if (pointer == compactBytesArray.length) return true;\n        return false;\n    }\n\n    /**\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\n     *\n     * @param arrayLength Plain bytes that should be validated.\n     *\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\n     */\n    function isValidLSP2ArrayLengthValue(\n        bytes memory arrayLength\n    ) internal pure returns (bool) {\n        if (arrayLength.length == 16) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\n     *\n     * @param arrayKey The Data Key of Key Type Array.\n     * @param newArrayLength The new Array Length for the `arrayKey`.\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\n     */\n    function removeLastElementFromArrayAndMap(\n        bytes32 arrayKey,\n        uint128 newArrayLength,\n        bytes32 removedElementIndexKey,\n        bytes32 removedElementMapKey\n    )\n        internal\n        pure\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\n    {\n        dataKeys = new bytes32[](3);\n        dataValues = new bytes[](3);\n\n        // store the number of received assets decremented by 1\n        dataKeys[0] = arrayKey;\n        dataValues[0] = abi.encodePacked(newArrayLength);\n\n        // remove the data value for the map key of the element\n        dataKeys[1] = removedElementMapKey;\n        dataValues[1] = \"\";\n\n        // remove the data value for the map key of the element\n        dataKeys[2] = removedElementIndexKey;\n        dataValues[2] = \"\";\n    }\n\n    /**\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\n     *\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\n     *\n     * @param erc725YContract The ERC725Y contract.\n     * @param arrayKey The Data Key of Key Type Array.\n     * @param newArrayLength The new Array Length for the `arrayKey`.\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n     * @param removedElementIndex the index of the removed element.\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\n     */\n    function removeElementFromArrayAndMap(\n        IERC725Y erc725YContract,\n        bytes32 arrayKey,\n        uint128 newArrayLength,\n        bytes32 removedElementIndexKey,\n        uint128 removedElementIndex,\n        bytes32 removedElementMapKey\n    )\n        internal\n        view\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\n    {\n        dataKeys = new bytes32[](5);\n        dataValues = new bytes[](5);\n\n        // store the number of received assets decremented by 1\n        dataKeys[0] = arrayKey;\n        dataValues[0] = abi.encodePacked(newArrayLength);\n\n        // remove the data value for the map key of the element\n        dataKeys[1] = removedElementMapKey;\n        dataValues[1] = \"\";\n\n        // Generate the key of the last element in the array\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\n            arrayKey,\n            newArrayLength\n        );\n\n        // Get the data value from the key of the last element in the array\n        bytes20 lastElementIndexValue = bytes20(\n            erc725YContract.getData(lastElementIndexKey)\n        );\n\n        // Set data value of the last element instead of the element from the array that will be removed\n        dataKeys[2] = removedElementIndexKey;\n        dataValues[2] = bytes.concat(lastElementIndexValue);\n\n        // Remove the data value for the swapped array element\n        dataKeys[3] = lastElementIndexKey;\n        dataValues[3] = \"\";\n\n        // Generate mapping key for the swapped array element\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\n            bytes10(removedElementMapKey),\n            lastElementIndexValue\n        );\n\n        // Generate the mapping value for the swapped array element\n        bytes memory lastElementMapValue = abi.encodePacked(\n            bytes4(erc725YContract.getData(lastElementMapKey)),\n            removedElementIndex\n        );\n\n        // Update the map value of the swapped array element to the new index\n        dataKeys[4] = lastElementMapKey;\n        dataValues[4] = lastElementMapValue;\n    }\n}\n"
    },
    "@lukso/lsp20-contracts/contracts/ILSP20CallVerifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface for the LSP20 Call Verification standard, a set of functions intended to perform verifications on behalf of another contract.\n *\n * @dev Interface to be inherited for contract supporting LSP20-CallVerification\n */\ninterface ILSP20CallVerifier {\n    /**\n     * @return returnedStatus MUST return the first 3 bytes of `lsp20VerifyCall(address,uint256,bytes)` function selector if the call to\n     * the function is allowed, concatenated with a byte that determines if the lsp20VerifyCallResult function should\n     * be called after the original function call. The byte that invoke the lsp20VerifyCallResult function is strictly `0x01`.\n     *\n     * @param requestor The address that requested to make the call to `target`.\n     * @param target The address of the contract that implements the `LSP20CallVerification` interface.\n     * @param caller The address who called the function on the `target` contract.\n     * @param value The value sent by the caller to the function called on the msg.sender\n     * @param callData The calldata sent by the caller to the msg.sender\n     */\n    function lsp20VerifyCall(\n        address requestor,\n        address target,\n        address caller,\n        uint256 value,\n        bytes memory callData\n    ) external returns (bytes4 returnedStatus);\n\n    /**\n     * @return MUST return the lsp20VerifyCallResult function selector if the call to the function is allowed\n     *\n     * @param callHash The keccak256 hash of the parameters of {lsp20VerifyCall} concatenated\n     * @param callResult The value result of the function called on the msg.sender\n     */\n    function lsp20VerifyCallResult(\n        bytes32 callHash,\n        bytes memory callResult\n    ) external returns (bytes4);\n}\n"
    },
    "@lukso/lsp20-contracts/contracts/LSP20CallVerification.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {ILSP20CallVerifier as ILSP20} from \"./ILSP20CallVerifier.sol\";\n\n// errors\nimport {\n    LSP20CallVerificationFailed,\n    LSP20CallingVerifierFailed,\n    LSP20EOACannotVerifyCall\n} from \"./LSP20Errors.sol\";\n\n/**\n * @title Implementation of a contract calling the verification functions according to LSP20 - Call Verification standard.\n *\n * @dev Module to be inherited used to verify the execution of functions according to a verifier address.\n * Verification can happen before or after execution based on a returnedStatus.\n */\nabstract contract LSP20CallVerification {\n    /**\n     * @dev Calls {lsp20VerifyCall} function on the logicVerifier.\n     *\n     * @custom:info\n     * - Reverts in case the value returned does not match the returned status (lsp20VerifyCall selector).\n     * - Returns whether a verification after the execution should happen based on the last byte of the `returnedStatus`.\n     * - Reverts with no reason if the  data returned by `ILSP20(logicVerifier).lsp20VerifyCall(...)` cannot be decoded (_e.g:_ any other data type besides `bytes4`).\n     * See this link for more info: https://forum.soliditylang.org/t/call-for-feedback-the-future-of-try-catch-in-solidity/1497.\n     */\n    function _verifyCall(\n        address logicVerifier\n    ) internal virtual returns (bool verifyAfter) {\n        if (logicVerifier.code.length == 0) {\n            revert LSP20EOACannotVerifyCall(logicVerifier);\n        }\n\n        // Reverts with no reason if the returned data type is not a `bytes4` value\n        try\n            ILSP20(logicVerifier).lsp20VerifyCall(\n                msg.sender,\n                address(this),\n                msg.sender,\n                msg.value,\n                msg.data\n            )\n        returns (bytes4 returnedStatus) {\n            if (\n                bytes3(returnedStatus) !=\n                bytes3(ILSP20.lsp20VerifyCall.selector)\n            ) {\n                revert LSP20CallVerificationFailed({\n                    postCall: false,\n                    returnedStatus: returnedStatus\n                });\n            }\n\n            return returnedStatus[3] == 0x01;\n        } catch (bytes memory errorData) {\n            _revertWithLSP20DefaultError(false, errorData);\n        }\n    }\n\n    /**\n     * @dev Calls {lsp20VerifyCallResult} function on the logicVerifier.\n     *\n     * @custom:info\n     * - Reverts in case the value returned does not match the returned status (lsp20VerifyCallResult selector).\n     * - Reverts with no reason if the data returned by `ILSP20(logicVerifier).lsp20VerifyCallResult(...)` cannot be decoded (_e.g:_ any other data type besides `bytes4`).\n     * See this link for more info: https://forum.soliditylang.org/t/call-for-feedback-the-future-of-try-catch-in-solidity/1497.\n     */\n    function _verifyCallResult(\n        address logicVerifier,\n        bytes memory callResult\n    ) internal virtual {\n        // Reverts with no reason if the returned data type is not a `bytes4` value\n        try\n            ILSP20(logicVerifier).lsp20VerifyCallResult(\n                keccak256(\n                    abi.encodePacked(\n                        msg.sender,\n                        address(this),\n                        msg.sender,\n                        msg.value,\n                        msg.data\n                    )\n                ),\n                callResult\n            )\n        returns (bytes4 returnedStatus) {\n            if (returnedStatus != ILSP20.lsp20VerifyCallResult.selector) {\n                revert LSP20CallVerificationFailed({\n                    postCall: true,\n                    returnedStatus: returnedStatus\n                });\n            }\n\n            return;\n        } catch (bytes memory errorData) {\n            _revertWithLSP20DefaultError(true, errorData);\n        }\n    }\n\n    function _revertWithLSP20DefaultError(\n        bool postCall,\n        bytes memory returnedData\n    ) internal pure virtual {\n        // Look for revert reason and bubble it up if present\n        if (returnedData.length != 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            // solhint-disable no-inline-assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returnedData)\n                revert(add(32, returnedData), returndata_size)\n            }\n        } else {\n            revert LSP20CallingVerifierFailed(postCall);\n        }\n    }\n}\n"
    },
    "@lukso/lsp20-contracts/contracts/LSP20Constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// bytes4(keccak256(\"LSP20CallVerification\"))\nbytes4 constant _INTERFACEID_LSP20_CALL_VERIFICATION = 0x1a0eb6a5;\n\n// `lsp20VerifyCall(address,address,address,uint256,bytes)` selector XOR `lsp20VerifyCallResult(bytes32,bytes)` selector\nbytes4 constant _INTERFACEID_LSP20_CALL_VERIFIER = 0x0d6ecac7;\n\n// bytes4(bytes.concat(bytes3(ILSP20.lsp20VerifyCall.selector), hex\"01\"))\nbytes4 constant _LSP20_VERIFY_CALL_SUCCESS_VALUE_WITH_POST_VERIFICATION = 0xde928f01;\n\n// bytes4(bytes.concat(bytes3(ILSP20.lsp20VerifyCall.selector), hex\"00\"))\nbytes4 constant _LSP20_VERIFY_CALL_SUCCESS_VALUE_WITHOUT_POST_VERIFICATION = 0xde928f00;\n\n// bytes4(ILSP20.lsp20VerifyCallResult.selector)\nbytes4 constant _LSP20_VERIFY_CALL_RESULT_SUCCESS_VALUE = 0xd3fc45d3;\n"
    },
    "@lukso/lsp20-contracts/contracts/LSP20Errors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev reverts when the call to the owner fail with no revert reason\n * @param postCall True if the execution call was done, False otherwise\n */\nerror LSP20CallingVerifierFailed(bool postCall);\n\n/**\n * @dev reverts when the call to the owner does not return the LSP20 success value\n * @param postCall True if the execution call was done, False otherwise\n * @param returnedStatus The bytes4 decoded data returned by the logic verifier.\n */\nerror LSP20CallVerificationFailed(bool postCall, bytes4 returnedStatus);\n\n/**\n * @dev Reverts when the logic verifier is an Externally Owned Account (EOA) that cannot return the LSP20 success value.\n * @param logicVerifier The address of the logic verifier\n */\nerror LSP20EOACannotVerifyCall(address logicVerifier);\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/ILyxaxis.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.29;\n\n/**\n * @title ILyxaxis\n * @notice Interface for the Lyxaxis contract that handles multisig wallet creation\n */\ninterface ILyxaxis {\n    /**\n     * @notice Emitted when a new multisig wallet is created\n     * @param multisig The address of the newly created multisig wallet\n     */\n    event CreatedMultisig(address multisig);\n\n    /**\n     * @notice Creates a new multisig wallet with specified owners and signature requirements\n     * @param profileMetadata The metadata for the Universal Profile\n     * @param _owners Array of initial owner addresses\n     * @param _signaturesRequired Number of signatures required for transactions\n     * @return The address of the newly created multisig wallet\n     */\n    function createWallet(\n        bytes calldata profileMetadata,\n        address[] calldata _owners,\n        uint256 _signaturesRequired\n    ) external returns (address);\n\n    /**\n     * @notice Gets the address of the MultiSigRegistry contract\n     * @return The address of the MultiSigRegistry contract\n     */\n    function getRegistry() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IMultiSig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.29;\n\n/**\n * @title IMultiSig\n * @notice Interface for the MultiSig contract that handles multi-signature transactions and Universal Profile management\n */\ninterface IMultiSig {\n    /**\n     * @notice Emitted when a transaction is executed\n     * @param owner The address of the owner who initiated the transaction\n     * @param to The destination address of the transaction\n     * @param value The amount of LYX sent in the transaction\n     * @param data The transaction data\n     * @param nonce The transaction nonce\n     * @param hash The transaction hash\n     * @param result The result of the transaction execution\n     */\n    event ExecuteTransaction(\n        address indexed owner,\n        address payable to,\n        uint256 value,\n        bytes data,\n        uint256 nonce,\n        bytes32 hash,\n        bytes result\n    );\n\n    /**\n     * @notice Emitted when an owner is added or removed\n     * @param owner The address of the owner\n     * @param added True if owner was added, false if removed\n     */\n    event Owner(address indexed owner, bool added);\n\n    /**\n     * @notice Emitted when the required number of signatures is updated\n     * @param newRequiredSignatures The new number of required signatures\n     */\n    event UpdatedRequiredSignatures(uint256 newRequiredSignatures);\n\n    /**\n     * @notice Adds a new signer to the multisig\n     * @param newSigner The address of the new signer to add\n     * @param newSignaturesRequired The new number of required signatures\n     */\n    function addSigner(address newSigner, uint256 newSignaturesRequired) external;\n\n    /**\n     * @notice Removes an existing signer from the multisig\n     * @param oldSigner The address of the signer to remove\n     * @param newSignaturesRequired The new number of required signatures\n     */\n    function removeSigner(address oldSigner, uint256 newSignaturesRequired) external;\n\n    /**\n     * @notice Updates the number of required signatures\n     * @param newSignaturesRequired The new number of required signatures\n     */\n    function updateSignaturesRequired(uint256 newSignaturesRequired) external;\n\n    /**\n     * @notice Gets the hash of a transaction\n     * @param _nonce The transaction nonce\n     * @param to The destination address\n     * @param value The amount of LYX to send\n     * @param data The transaction data\n     * @return The transaction hash\n     */\n    function getTransactionHash(\n        uint256 _nonce,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external view returns (bytes32);\n\n    /**\n     * @notice Executes a transaction with multiple signatures\n     * @param to The destination address\n     * @param value The amount of LYX to send\n     * @param data The transaction data\n     * @param signatures Array of signatures\n     * @return The result of the transaction execution\n     */\n    function executeTransaction(\n        address payable to,\n        uint256 value,\n        bytes memory data,\n        bytes[] memory signatures\n    ) external returns (bytes memory);\n\n    /**\n     * @notice Recovers the signer address from a signature\n     * @param _hash The hash that was signed\n     * @param _signature The signature to recover\n     * @return The recovered signer address\n     */\n    function recover(bytes32 _hash, bytes memory _signature) external pure returns (address);\n\n    /**\n     * @notice Gets the address of the Universal Profile\n     * @return The address of the Universal Profile\n     */\n    function getUniversalProfile() external view returns (address);\n\n    /**\n     * @notice Gets the number of required signatures\n     * @return The number of required signatures\n     */\n    function signaturesRequired() external view returns (uint256);\n\n    /**\n     * @notice Gets the current nonce\n     * @return The current nonce\n     */\n    function nonce() external view returns (uint256);\n\n    /**\n     * @notice Gets the number of owners\n     * @return The number of owners\n     */\n    function numOfOwners() external view returns (uint256);\n\n    /**\n     * @notice Checks if an address is an owner\n     * @param owner The address to check\n     * @return True if the address is an owner, false otherwise\n     */\n    function isOwner(address owner) external view returns (bool);\n}\n"
    },
    "contracts/Lyxaxis.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.29;\n\nimport { MultiSig } from \"./MultiSig.sol\";\nimport { MultiSigRegistry } from \"./MultiSigRegistry.sol\";\nimport { ILyxaxis } from \"./interfaces/ILyxaxis.sol\";\n\nerror Lyxaxis__NoRequiredSignatures();\nerror Lyxaxis__NoOwners();\n\n/**\n * @title Lyxaxis\n * @notice Factory contract for creating and managing multisig wallets\n * @dev Handles the creation of new multisig wallets and their registration in the MultiSigRegistry\n */\ncontract Lyxaxis is ILyxaxis {\n    MultiSigRegistry private immutable i_registry;\n\n    /**\n     * @notice Creates a new MultiSigRegistry instance\n     */\n    constructor() {\n        i_registry = new MultiSigRegistry(address(this));\n    }\n\n    /**\n     * @notice Creates a new multisig wallet\n     * @param profileMetadata The metadata for the Universal Profile\n     * @param _owners Array of initial owner addresses\n     * @param _signaturesRequired Number of signatures required for transactions\n     * @return The address of the newly created multisig wallet\n     */\n    function createWallet(\n        bytes calldata profileMetadata,\n        address[] calldata _owners,\n        uint256 _signaturesRequired\n    ) external returns (address) {\n        require(_signaturesRequired != 0, Lyxaxis__NoRequiredSignatures());\n        require(_owners.length > 0, Lyxaxis__NoOwners());\n\n        MultiSig multisig = new MultiSig(profileMetadata, _owners, _signaturesRequired, i_registry);\n        address multisigAddress = address(multisig);\n\n        // Register the new multisig with its owners in the registry\n        i_registry.registerMultisig(multisigAddress, _owners);\n\n        emit CreatedMultisig(multisigAddress);\n\n        return multisigAddress;\n    }\n\n    /**\n     * @notice Gets the address of the MultiSigRegistry\n     * @return The address of the MultiSigRegistry\n     */\n    function getRegistry() external view returns (address) {\n        return address(i_registry);\n    }\n}\n"
    },
    "contracts/MultiSig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.29;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./MultiSigRegistry.sol\";\nimport { LSP0ERC725Account } from \"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0ERC725Account.sol\";\nimport { ILSP20CallVerifier } from \"@lukso/lsp-smart-contracts/contracts/LSP20CallVerification/ILSP20CallVerifier.sol\";\nimport { IMultiSig } from \"./interfaces/IMultiSig.sol\";\nerror MultiSig__ZeroAddress();\nerror MultiSig__OwnerNotUnique();\nerror MultiSig__NotUniversalProfile();\nerror MultiSig__ZeroRequiredSignatures();\nerror MultiSig__NotOwner();\nerror MultiSig__DuplicateOrUnorderedSignatures();\nerror MultiSig__NotUPOrUPOwner();\nerror MultiSig__TransferFailed();\nerror MultiSig__InvalidSignaturesCount();\nerror MultiSig__CannotRemoveLastOwner();\nerror MultiSig__InvalidSignaturesRequired();\nerror MultiSig__ContractNotAllowed();\n\n/**\n * @title MultiSig\n * @notice A multi-signature wallet contract that allows multiple owners to manage a Universal Profile\n * @dev Implements LSP20 for call verification and uses ECDSA for signature verification\n */\ncontract MultiSig is IMultiSig, ILSP20CallVerifier {\n    bytes32 constant LSP3_PROFILE_KEY = 0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5;\n\n    MultiSigRegistry private immutable i_registry;\n    LSP0ERC725Account private immutable i_universalProfile;\n\n    uint256 public signaturesRequired;\n    uint256 public nonce;\n    uint256 public numOfOwners;\n\n    mapping(address => bool) public isOwner;\n\n    /**\n     * @notice Records owners and initializes the Universal Profile\n     * @param profileMetadata The metadata for the Universal Profile\n     * @param _owners Array of initial owner addresses\n     * @param _signaturesRequired Number of signatures required for transactions\n     * @param _registry Address of the MultiSigRegistry contract\n     */\n    constructor(\n        bytes memory profileMetadata,\n        address[] memory _owners,\n        uint256 _signaturesRequired,\n        MultiSigRegistry _registry\n    ) {\n        signaturesRequired = _signaturesRequired;\n        uint256 ownersLength = _owners.length;\n        for (uint256 i = 0; i < ownersLength; i++) {\n            address owner = _owners[i];\n\n            require(owner != address(0), MultiSig__ZeroAddress());\n            require(owner.code.length == 0, MultiSig__ContractNotAllowed());\n            require(!isOwner[owner], MultiSig__OwnerNotUnique());\n\n            isOwner[owner] = true;\n\n            emit Owner(owner, true);\n        }\n        numOfOwners = ownersLength;\n        i_registry = _registry;\n\n        i_universalProfile = new LSP0ERC725Account(address(this));\n\n        // Set the profile metadata\n        i_universalProfile.setData(LSP3_PROFILE_KEY, profileMetadata);\n    }\n\n    /**\n     * @notice Modifier to restrict access to Universal Profile only\n     */\n    modifier onlyUP() {\n        require(msg.sender == address(i_universalProfile), MultiSig__NotUniversalProfile());\n        _;\n    }\n\n    /**\n     * @notice Adds a new signer to the multisig\n     * @dev Can only be called by the Universal Profile\n     * @param newSigner The address of the new signer to add\n     * @param newSignaturesRequired The new number of required signatures\n     */\n    function addSigner(address newSigner, uint256 newSignaturesRequired) public onlyUP {\n        require(newSigner != address(0), MultiSig__ZeroAddress());\n        require(newSigner.code.length == 0, MultiSig__ContractNotAllowed());\n        require(!isOwner[newSigner], MultiSig__OwnerNotUnique());\n        require(newSignaturesRequired > 0, MultiSig__ZeroRequiredSignatures());\n        require(newSignaturesRequired <= numOfOwners + 1, MultiSig__InvalidSignaturesRequired());\n\n        isOwner[newSigner] = true;\n        signaturesRequired = newSignaturesRequired;\n        numOfOwners++;\n\n        emit Owner(newSigner, true);\n\n        // Update registry\n        i_registry.addSigner(newSigner);\n    }\n\n    /**\n     * @notice Removes an existing signer from the multisig\n     * @dev Can only be called by the Universal Profile\n     * @param oldSigner The address of the signer to remove\n     * @param newSignaturesRequired The new number of required signatures\n     */\n    function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlyUP {\n        require(isOwner[oldSigner], MultiSig__NotOwner());\n        require(numOfOwners > 1, MultiSig__CannotRemoveLastOwner());\n        require(newSignaturesRequired > 0, MultiSig__ZeroRequiredSignatures());\n        require(newSignaturesRequired <= numOfOwners - 1, MultiSig__InvalidSignaturesRequired());\n\n        isOwner[oldSigner] = false;\n        signaturesRequired = newSignaturesRequired;\n        numOfOwners--;\n\n        emit Owner(oldSigner, false);\n\n        // Update registry\n        i_registry.removeSigner(oldSigner);\n    }\n\n    /**\n     * @notice Updates the number of required signatures\n     * @dev Can only be called by the Universal Profile\n     * @param newSignaturesRequired The new number of required signatures\n     */\n    function updateSignaturesRequired(uint256 newSignaturesRequired) public onlyUP {\n        require(newSignaturesRequired > 0, MultiSig__ZeroRequiredSignatures());\n        require(newSignaturesRequired <= numOfOwners, MultiSig__InvalidSignaturesRequired());\n\n        signaturesRequired = newSignaturesRequired;\n\n        emit UpdatedRequiredSignatures(newSignaturesRequired);\n    }\n\n    /**\n     * @notice Gets the hash of a transaction\n     * @param _nonce The transaction nonce\n     * @param to The destination address\n     * @param value The amount of LYX to send\n     * @param data The transaction data\n     * @return The transaction hash\n     */\n    function getTransactionHash(\n        uint256 _nonce,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(address(this), _nonce, to, value, data));\n    }\n\n    /**\n     * @notice Executes a transaction with multiple signatures\n     * @dev Requires sufficient valid signatures from owners to be in ascending order\n     * @param to The destination address\n     * @param value The amount of LYX to send\n     * @param data The transaction data\n     * @param signatures Array of signatures\n     * @return The result of the transaction execution\n     */\n    function executeTransaction(\n        address payable to,\n        uint256 value,\n        bytes memory data,\n        bytes[] memory signatures\n    ) public returns (bytes memory) {\n        bytes32 _hash = getTransactionHash(nonce, to, value, data);\n\n        nonce++;\n\n        uint256 validSignatures;\n        address duplicateGuard;\n\n        uint256 signaturesLength = signatures.length;\n        for (uint256 i = 0; i < signaturesLength; i++) {\n            address recovered = recover(_hash, signatures[i]);\n\n            require(recovered > duplicateGuard, MultiSig__DuplicateOrUnorderedSignatures());\n\n            duplicateGuard = recovered;\n\n            if (isOwner[recovered]) {\n                validSignatures++;\n            }\n        }\n\n        require(validSignatures >= signaturesRequired, MultiSig__InvalidSignaturesCount());\n\n        // Execute transaction through UP's execute function to maintain UP context\n        bytes memory result = i_universalProfile.execute(0, to, value, data);\n\n        emit ExecuteTransaction(msg.sender, to, value, data, nonce - 1, _hash, result);\n        return result;\n    }\n\n    /**\n     * @notice Recovers the signer address from a signature\n     * @param _hash The hash that was signed\n     * @param _signature The signature to recover\n     * @return The recovered signer address\n     */\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\n        return ECDSA.recover(ECDSA.toEthSignedMessageHash(_hash), _signature);\n    }\n\n    /**\n     * @notice Gets the address of the Universal Profile\n     * @return The address of the Universal Profile\n     */\n    function getUniversalProfile() external view returns (address) {\n        return address(i_universalProfile);\n    }\n\n    function lsp20VerifyCall(\n        address /* requestor */,\n        address /* target */,\n        address caller,\n        uint256 /* value */,\n        bytes memory /* callData */\n    ) external view returns (bytes4 returnedStatus) {\n        require(caller == address(this) || caller == address(i_universalProfile), MultiSig__NotUPOrUPOwner());\n        return 0xde928f01;\n    }\n\n    function lsp20VerifyCallResult(\n        bytes32 /* callHash */,\n        bytes memory /* callResult */\n    ) external pure returns (bytes4) {\n        return 0xd3fc45d3;\n    }\n\n    /**\n     * @notice Fallback function to receive LYX\n     * @dev Forwards received LYX to the Universal Profile\n     */\n    receive() external payable {\n        (bool success, ) = payable(i_universalProfile).call{ value: msg.value }(\"\");\n        require(success, MultiSig__TransferFailed());\n    }\n}\n"
    },
    "contracts/MultiSigRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.29;\n\nimport { ILyxaxis } from \"./interfaces/ILyxaxis.sol\";\nimport { EnumerableSet } from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nerror MultiSigRegistry__NotAuthorized();\nerror MultiSigRegistry__SignerAlreadyExists();\nerror MultiSigRegistry__SignerNotFound();\nerror MultiSigRegistry__MultisigAlreadyExists();\nerror MultiSigRegistry__MultisigNotFound();\n\n/**\n * @title MultiSigRegistry\n * @notice Contract for managing multisig wallets and their owners\n * @dev Uses EnumerableSet for efficient management of multisig owners and signers\n */\ncontract MultiSigRegistry {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // Mapping from signer address to their owned multisig addresses\n    mapping(address => EnumerableSet.AddressSet) private s_signerToMultisigs;\n\n    // Mapping from multisig address to its owners\n    mapping(address => EnumerableSet.AddressSet) private s_multisigToOwners;\n\n    // Mapping to track if an address is a valid multisig\n    mapping(address => bool) private s_validMultisigs;\n\n    // Address of the Lyxaxis contract that can register new multisigs\n    address private immutable i_lyxaxis;\n\n    /**\n     * @notice Sets the Lyxaxis contract address\n     * @param _lyxaxis The address of the Lyxaxis contract\n     */\n    constructor(address _lyxaxis) {\n        i_lyxaxis = _lyxaxis;\n    }\n\n    /**\n     * @notice Modifier to restrict access to registered multisig wallets only\n     */\n    modifier onlyMultiSig() {\n        if (!s_validMultisigs[msg.sender]) {\n            revert MultiSigRegistry__NotAuthorized();\n        }\n        _;\n    }\n\n    /**\n     * @notice Registers a new multisig wallet with its owners\n     * @dev Can only be called by the Lyxaxis contract\n     * @param _multisig The address of the multisig wallet\n     * @param _owners Array of owner addresses\n     */\n    function registerMultisig(address _multisig, address[] calldata _owners) external {\n        if (msg.sender != i_lyxaxis) {\n            revert MultiSigRegistry__NotAuthorized();\n        }\n\n        if (s_validMultisigs[_multisig]) {\n            revert MultiSigRegistry__MultisigAlreadyExists();\n        }\n\n        s_validMultisigs[_multisig] = true;\n\n        // Add owners to multisig's set\n        uint256 numOfOwners = _owners.length;\n        for (uint256 i = 0; i < numOfOwners; i++) {\n            s_multisigToOwners[_multisig].add(_owners[i]);\n            s_signerToMultisigs[_owners[i]].add(_multisig);\n        }\n    }\n\n    /**\n     * @notice Adds a new signer to a multisig wallet\n     * @dev Can only be called by registered multisig wallets\n     * @param _newSigner The address of the new signer to add\n     */\n    function addSigner(address _newSigner) external onlyMultiSig {\n        if (!s_validMultisigs[msg.sender]) {\n            revert MultiSigRegistry__MultisigNotFound();\n        }\n\n        if (!s_multisigToOwners[msg.sender].add(_newSigner)) {\n            revert MultiSigRegistry__SignerAlreadyExists();\n        }\n\n        s_signerToMultisigs[_newSigner].add(msg.sender);\n    }\n\n    /**\n     * @notice Removes a signer from a multisig wallet\n     * @dev Can only be called by registered multisig wallets\n     * @param _signer The address of the signer to remove\n     */\n    function removeSigner(address _signer) external onlyMultiSig {\n        if (!s_validMultisigs[msg.sender]) {\n            revert MultiSigRegistry__MultisigNotFound();\n        }\n\n        if (!s_multisigToOwners[msg.sender].remove(_signer)) {\n            revert MultiSigRegistry__SignerNotFound();\n        }\n\n        s_signerToMultisigs[_signer].remove(msg.sender);\n    }\n\n    /**\n     * @notice Gets all multisig wallets owned by a signer\n     * @param _signer The address of the signer\n     * @return Array of multisig wallet addresses\n     */\n    function getSignerMultisigs(address _signer) external view returns (address[] memory) {\n        return s_signerToMultisigs[_signer].values();\n    }\n\n    /**\n     * @notice Gets all owners of a multisig wallet\n     * @param _multisig The address of the multisig wallet\n     * @return Array of owner addresses\n     */\n    function getMultisigOwners(address _multisig) external view returns (address[] memory) {\n        return s_multisigToOwners[_multisig].values();\n    }\n\n    /**\n     * @notice Checks if an address is a valid multisig wallet\n     * @param _multisig The address to check\n     * @return True if the address is a valid multisig wallet, false otherwise\n     */\n    function isValidMultisig(address _multisig) external view returns (bool) {\n        return s_validMultisigs[_multisig];\n    }\n}\n"
    },
    "solidity-bytes-utils/contracts/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}